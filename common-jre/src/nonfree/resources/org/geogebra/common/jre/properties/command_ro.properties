# Copyright (c) GeoGebra Group, office@geogebra.org
# The GeoGebra language files are licensed to you under the terms of the
# Creative Commons Attribution-NonCommercial-ShareAlike licence (version 3.0 or later),
# the current text of which can be found via this link:
# https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode.
# Attribution (as required by that Creative Commons license) should take the form of
# (at least) a mention of our name, an appropriate copyright notice and a link to our
# website located at https://www.geogebra.org.
# For further details, please see https://www.geogebra.org/license
ANOVA.Syntax=[ <List\u0103>, <List\u0103>, ... ]
AffineRatio=RaportAfin
AffineRatio.Syntax=[ <Punct>, <Punct>, <Punct> ]
Angle=Unghi
Angle.Syntax=[ <Obiect> ]\n[ <Vector>, <Vector> ]\n[ <Dreapt\u0103>, <Dreapt\u0103> ]\n[ <Punct>, <Vârf>, <Punct> ]\n[ <Punct>, <Vârf>, <Unghi> ]
Angle.Syntax3D=[ <Obiect> ]\n[ <Vector>, <Vector> ]\n[ <Dreapta>, <Dreapta> ]\n[ <Dreapta>, <Plan> ]\n[ <Plan>, <Plan> ]\n[ <Punct>, <Vârf>, <Punct> ]\n[ <Punct>, <Vârf>, <Unghi> ]\n[ <Punct>, <Punct>, <Punct>, <Direc\u021bie> ]
AngularBisector=Bisectoare
AngularBisector.Syntax=[ <Dreapt\u0103>, <Dreapt\u0103> ]\n[ <Punct>, <Punct>, <Punct> ]
Append=Adaug\u0103
Append.Syntax=[ <List\u0103>, <Obiect> ]\n[ <Obiect>, <List\u0103> ]
ApplyMatrix=Aplic\u0103Matrice
ApplyMatrix.Syntax=[ <Matrice>, <Obiect> ]
Arc.Syntax=[ <Cerc>, <Punct>, <Punct> ]\n[ <Elips\u0103>, <Punct>, <Punct> ]\n[ <Cerc>, <Valoare parametru>, <Valoare parametru> ]\n[ <Elips\u0103>, <Valoare parametru>, <Valoare parametru> ]
AreCollinear=SuntColiniare
AreCollinear.Syntax=[ <Punct>, <Punct>, <Punct> ]
AreConcurrent=SuntConcurente
AreConcurrent.Syntax=[ <Dreapt\u0103>, <Dreapt\u0103>, <Dreapt\u0103> ]
AreConcyclic=SuntConciclice
AreConcyclic.Syntax=[ <Punct>, <Punct>, <Punct>, <Punct> ]
AreCongruent.Syntax=[ <Obiect>, <Obiect> ]
AreEqual=SuntEgale
AreEqual.Syntax=[ <Obiect>, <Obiect> ]
AreParallel=SuntParalele
AreParallel.Syntax=[ <Dreapt\u0103>, <Dreapt\u0103> ]
ArePerpendicular=SuntPerpendiculare
ArePerpendicular.Syntax=[ <Dreapt\u0103>, <Dreapt\u0103> ]
Area=Arie
Area.Syntax=[ <Conic\u0103> ]\n[ <Poligon> ]\n[ <Punct>, ..., <Punct> ]
Asymptote=Asimptot\u0103
Asymptote.Syntax=[ <Conic\u0103> ]\n[ <Func\u0163ie> ]\n[ <Curb\u0103 implicit\u0103> ]
AttachCopyToView=Ata\u0219areCopieSpreVizualizare
AttachCopyToView.Syntax=[ <Obiect>, <Vizualizare 0|1|2> ]\n[ <Obiect>, <Vizualizare 0|1|2>, <Punct 1>, <Punct 2>, <Punct de ecran 1>, <Punct de ecran 2> ]
Axes=Axe
Axes.Syntax=[ <Conic\u0103> ]
AxisStepX=PasAxaX
AxisStepY=PasAxaY
BarChart=Diagram\u0103Bare
BarChart.Syntax=[ <Lista de date>, <List\u0103 de frecven\u021be> ]\n[ <List\u0103 de date raw>, <Latime de bare>, <Factor scar\u0103 vertical\u0103 (op\u021bional)> ]\n[ <List\u0103 de date>, <List\u0103 de frecven\u021be>, <Latime de bare> ]\n[ <Valuare ini\u0163ial\u0103>, <Valuare final\u0103>, <Lista înal\u0163ime> ]\n[ <Valuare ini\u0163ial\u0103>, <Valuare final\u0103>, <expresie>, <variabil\u0103>, <de la num\u0103rul>, <La num\u0103rul> ]\n[ <Valuare ini\u0163ial\u0103>, <Valuare final\u0103>, <expresie>, <variabil\u0103>, <de la num\u0103rul>, <La num\u0103rul>, <La\u0163ime Pas> ]
BarCode=Cod_de_bare
BarCode.Syntax=[ ]\n[ <Imagine> ]\n[ <Text sau num\u0103r>, "<Format (op\u021bional)>", "<Corectarea erorii (op\u021bional)>", <L\u0103\u021bime (op\u021bional)>, <În\u0103l\u021bime (op\u021bional)> ]
Barycenter=Baricentru
Barycenter.Syntax=[ <List\u0103 de puncte>, <List\u0103 de ponderi> ]
Bernoulli.Syntax=[ <Probabilitate>, <Boolean Cumulat> ]
Binomial=CoeficientBinomial
Binomial.Syntax=[ <Num\u0103r n>, <Num\u0103r r> ]
BinomialDist.Syntax=[ <Num\u0103r de încerc\u0103ri>, <Probabilitatea de succes> ]\n[ <Num\u0103r de încerc\u0103ri>, <Probabilitatea de succes>, <Boolean cumulativ> ]\n[ <Num\u0103r de încerc\u0103ri>, <Probabilitatea de succes>, <Valoare variabil\u0103>, <Boolean cumulativ> ]
BinomialDist.SyntaxCAS=[ <Numar de Incercari>, <Probabilitate de Succes>, <Valoarea Variabilei>, <Cumulativ Boolean> ]
Bottom=BazaInferioar\u0103
Bottom.Syntax=[ <Quadric\u0103> ]
BoxPlot.Syntax=[ <yCompensa\u021bie>, <yScal\u0103>, <List\u0103 date brute> ]\n[ <yCompensa\u021bie>, <yScal\u0103>, <List\u0103 date brute>, <Aberante Booleane> ]\n[ <yCompensa\u021bie>, <yScal\u0103>, <List\u0103 date brute>, <List\u0103 frecven\u021be>, <Aberante Booleane> ]\n[ <yCompensa\u021bie>, <yScal\u0103>, <Valoare Start>, <Q1>, <Median\u0103>, <Q3>, <Valoare Final> ]
Button=Buton
Button.Syntax=[ ]\n[ <Legend\u0103> ]
CFactor=CFactorizare
CFactor.SyntaxCAS=[ <Expresie> ]\n[ <Expresie>, <Variabil\u0103> ]
CIFactor.SyntaxCAS=[ <Expresie> ]\n[ <Expresie>, <Variabil\u0103> ]
CSolutions=CSolu\u021bii
CSolutions.SyntaxCAS=[ <Ecua\u0163ie> ]\n[ <Ecua\u0163ie>, <Variabil\u0103> ]\n[ <List\u0103 ecua\u0163ii>, <List\u0103 variabile> ]
CSolve=CRezolv\u0103
CSolve.SyntaxCAS=[ <Ecua\u0163ie> ]\n[ <Ecua\u0163ie>, <Variabil\u0103> ]\n[ <List\u0103 ecua\u0163ii>, <List\u0103 variabile> ]
Cauchy.Syntax=[ <Median\u0103>, <Scar\u0103>, <Valoare variabil\u0103> ]\n[ <Median\u0103>, <Scar\u0103>, x, <Cumulativ Boolean> ]
Cauchy.SyntaxCAS=[ <Median\u0103>, <Scal\u0103>, <Valoare Variabil\u0103> ]
Cell=Celul\u0103
Cell.Syntax=[ <Coloan\u0103>, <Rând> ]
CellRange=\u015eirCelule
CellRange.Syntax=[ <Celul\u0103 de început>, <Celul\u0103 de sfâr\u015fit> ]
Center=Centru
Center.Syntax=[ <Conic\u0103> ]
Center.Syntax3D=[ <Conic\u0103> ]\n[ <Quadric\u0103> ]
CenterView=VedereCentral\u0103
CenterView.Syntax=[ <Centru> ]
Centroid=CentruPoligon
Centroid.Syntax=[ <Poligon> ]
Checkbox.Syntax=[ ]\n[ <Legend\u0103> ]\n[ <List\u0103> ]\n[ <Legend\u0103>, <List\u0103> ]
ChiSquared.Syntax=[ <Grade de libertate>, <Valori variabile> ]\n[ <Grade de libertate>, x, <Cumulativ Boolean> ]
ChiSquared.SyntaxCAS=[ <Grad de libertate>, <Variabil\u0103> ]
ChiSquaredTest=TestChiP\u0103trat
ChiSquaredTest.Syntax=[ <Matrice> ]\n[ <List\u0103>, <List\u0103> ]\n[ <Matrice>, <Matrice> ]
Circle=Cerc
Circle.Syntax=[ <Punct>, <Raz\u0103> ]\n[ <Punct>, <Segment> ]\n[ <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Punct> ]
Circle.Syntax3D=[ <Punct>, <Raz\u0103> ]\n[ <Punct>, <Segment> ]\n[ <Punct>, <Punct> ]\n[ <Linie>, <Punct> ]\n[ <Punct>, <Punct>, <Punct> ]\n[ <Punct>, <Raz\u0103>, <Direc\u021bie> ]\n[ <Punct>, <Punct>, <Direc\u021bie> ]
CircleArc=ArcCircular
CircleArc.Syntax=[ <Punct de mijloc>, <Punct>, <Punct> ]
CircleSector=SectorCircular
CircleSector.Syntax=[ <Punct de mijloc>, <Punct>, <Punct> ]
CircumcircleArc=ArcCircumcircular
CircumcircleArc.Syntax=[ <Punct>, <Punct>, <Punct> ]
CircumcircleSector=SectorCircumcircular
CircumcircleSector.Syntax=[ <Punct>, <Punct>, <Punct> ]
Circumference=Circumferin\u0163\u0103
Circumference.Syntax=[ <Conic\u0103> ]
Classes=Clase
Classes.Syntax=[ <List\u0103 de date>, <Num\u0103r de clase> ]\n[ <List\u0103 de date>, <Start>, <L\u0103\u0163ime de clase> ]
ClosestPoint=CelmaiapropiatPunct
ClosestPoint.Syntax=[ <Direc\u021bie>, <Punct> ]\n[ <Linie>, <Linie> ]
ClosestPointRegion=CelMaiApropiatPunctDeRegiune
ClosestPointRegion.Syntax=[ <Regiune>, <Punct> ]
Coefficients=Coeficien\u0163i
Coefficients.Syntax=[ <Polinomial> ]\n[ <Conic> ]
Coefficients.SyntaxCAS=[ <Polynom> ]\n[ <Polynom>, <Variabil\u0103> ]
Column=Coloan\u0103
Column.Syntax=[ <Celul\u0103 din foaia de calcul> ]
ColumnName=NumeColoan\u0103
ColumnName.Syntax=[ <Celul\u0103 din foaia de calcul> ]
Command=Comand\u0103
CommonDenominator=NumitorComun
CommonDenominator.Syntax=[ <Expresie>, <Expresie> ]
CompetitionRank=Clasament
CompetitionRank.Syntax=[ <List\u0103> ]
CompleteSquare=P\u0103tratComplet
CompleteSquare.Syntax=[ <Func\u0163ie p\u0103tratic\u0103> ]
ComplexRoot=R\u0103d\u0103cin\u0103Complex\u0103
ComplexRoot.Syntax=[ <Polinomial> ]
Cone=Con
Cone.Syntax=[ <Cerc>, <În\u0103l\u0163ime> ]\n[ <Punct>, <Punct>, <Raz\u0103> ]\n[ <Punct>, <Vector>, <Unghi> ]
Conic=Conic\u0103
Conic.Syntax=[ <Punct>, <Punct>, <Punct>, <Punct>, <Punct> ]\n[ <Num\u0103r>, <Num\u0103r>, <Num\u0103r>, <Num\u0103r>, <Num\u0103r>, <Num\u0103r> ]
ConstructionStep=PasDeConstruc\u0163ie
ConstructionStep.Syntax=[ ]\n[ <Obiect> ]
ContingencyTable=TabelContingen\u021b\u0103
ContingencyTable.Syntax=[ <List\u0103 Texte>, <List\u0103 Texte> ]\n[ <List\u0103 Texte>, <List\u0103 Texte>, <Op\u021biuni> ]\n[ <List\u0103 Valori de Linie>, <List\u0103 Valori de Coloan\u0103>, <Tabel Frecven\u021be> ]\n[ <List\u0103 Valori de Linie>, <List\u0103 Valori de Coloan\u0103>, <Tabel Frecven\u021be>, <Op\u021biuni> ]
ContinuedFraction=Frac\u021bieContinu\u0103
ContinuedFraction.Syntax=[ <Num\u0103r> ]\n[ <Num\u0103r>, <Nivel> ]\n[ <Num\u0103r>, <Nivel>, <Conformitate adev\u0103rat|fals> ]
ConvexHull=ÎnvelitoareComplex\u0103
ConvexHull.Syntax=[ <List\u0103 de Puncte> ]
CopyFreeObject=Copia\u0163iObiectLiber
CopyFreeObject.Syntax=[ <Obiect> ]
Corner=Col\u0163
Corner.Syntax=[ <Num\u0103r col\u0163uri> ]\n[ <Imagine>, <Num\u0103r col\u0163uri> ]\n[ <Text>, <Num\u0103r col\u0163uri> ]\n[ <Fereast\u0103 grafic\u0103>, <Num\u0103r col\u0163uri> ]
CountIf=ContorCondi\u0163ional
CountIf.Syntax=[ <Condi\u0163ie>, <List\u0103> ]\n[ <Condi\u0163ie>, <Variabil\u0103>, <List\u0103> ]
Covariance=Covarian\u0163\u0103
Covariance.Syntax=[ <List\u0103 de puncte> ]\n[ <List\u0103 de numere>, <List\u0103 de numere> ]
Cross=Produs Vectorial
CrossRatio=RaportAnarmonic
CrossRatio.Syntax=[ <Punct>, <Punct>, <Punct>, <Punct> ]
Cube=Cub
Cube.Syntax=[ <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Direc\u0163ie> ]
Cubic.Syntax=[ <Punct>, <Punct>, <Punct>, <Num\u0103r> ]
Curvature=Curbur\u0103
Curvature.Syntax=[ <Punct>, <Obiect> ]
CurvatureVector=VectorDeCurbur\u0103
CurvatureVector.Syntax=[ <Punct>, <Obiect> ]
CurveCartesian=Curb\u0103
CurveCartesian.Syntax=[ <Expresie>, <Expresie>, <Variabil\u0103 Parametru>, <Valoare Ini\u0163ial\u0103>, <Valoare Final\u0103> ]
CurveCartesian.Syntax3D=[ <Expresie>, <Expresie>, <Variabil\u0103>, <Valoare Start>, <Valoare Final> ]\n[ <Expresie>, <Expresie>, <Expresie>, <Variabil\u0103>, <Valoare Start>, <Valoare Final> ]
Cylinder=Cilindru
Cylinder.Syntax=[ <Cerc>, <În\u0103l\u0163ime> ]\n[ <Punct>, <Punct>, <Raz\u0103> ]
DataFunction.Syntax=[ <List\u0103 de numere>, <List\u0103 de numere> ]
Defined=Define\u015fte
Defined.Syntax=[ <Obiect> ]
Degree=Grad
Degree.Syntax=[ <Polinom> ]
Degree.SyntaxCAS=[ <Polynom> ]\n[ <Polynom>, <Variabil\u0103> ]
DelauneyTriangulation=TriangulareDelaunay
DelauneyTriangulation.Syntax=[ <List\u0103 de puncte> ]
Delete=\u015eterge
Delete.Syntax=[ <Obiect> ]
Denominator=Numitor
Denominator.Syntax=[ <Func\u0163ie> ]
Denominator.SyntaxCAS=[ <Expresie> ]
DensityPlot=Plotdensitate
Derivative=Derivata
Derivative.Syntax=[ <Func\u0163ie> ]\n[ <Curb\u0103> ]\n[ <Func\u0163ie>, <Num\u0103r> ]\n[ <Func\u0163ie>, <Variabil\u0103> ]\n[ <Curb\u0103>, <Num\u0103r> ]\n[ <Func\u0163ie>, <Variabil\u0103>, <Num\u0103r> ]
Derivative.SyntaxCAS=[ <Expresie> ]\n[ <Expresie>, <Variabil\u0103> ]\n[ <Expresie>, <Variabil\u0103>, <Num\u0103r> ]
Determinant.Syntax=[ <Matrice> ]
Diameter=DiametruConjugat
Diameter.Syntax=[ <Vector>, <Conic\u0103> ]\n[ <Dreapt\u0103>, <Conic\u0103> ]
Dilate=Dilatare
Dilate.Syntax=[ <Obiect>, <Factor de Dilatare> ]\n[ <Obiect>, <Factor de Dilatare>, <Punct Central al Dilat\u0103rii> ]
Dimension=Dimensiune
Dimension.Syntax=[ <Obiect> ]
Direction=Direc\u0163ie
Direction.Syntax=[ <Dreapt\u0103> ]
Directrix=Directoare
Directrix.Syntax=[ <Conic\u0103> ]
Distance=Distan\u0163\u0103
Distance.Syntax=[ <Punct>, <Obiect> ]\n[ <Dreapt\u0103>, <Dreapt\u0103> ]
Div.Syntax=[ <Num\u0103r\u0103tor>, <Numitor> ]
Division=Împ\u0103r\u0163ire
Division.Syntax=[ <Deîmp\u0103r\u021bit>, <Divizor> ]\n[ <Deîmp\u0103r\u021bit Polinomial>, <Divizor Polinomial> ]
Divisors=Divizori
Divisors.Syntax=[ <Num\u0103r> ]
DivisorsList=List\u0103Divizori
DivisorsList.Syntax=[ <Num\u0103r> ]
DivisorsSum=SumaDivizori
DivisorsSum.Syntax=[ <Num\u0103r> ]
Dodecahedron=Dodecaedru
Dodecahedron.Syntax=[ <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Direc\u0163ie> ]
Dot=Produs Scalar
DotPlot.Syntax=[ <Lista de Date Raw>, <Stiva puncte adiacente (op\u0163ional)>, <Factor Scar\u0103 (op\u0163ional)> ]
DynamicCoordinates=CoordonateDinamice
DynamicCoordinates.Syntax=[ <Punct>, <Num\u0103r>, <Num\u0103r> ]
Eccentricity=Excentricitate
Element.Syntax=[ <List\u0103>, <Pozi\u0163ia Elementului> ]
Element.SyntaxCAS=[ <List\u0103>, <Pozi\u0163ia elementului> ]\n[ <Matrice>, <Rând>, <Coloan\u0103> ]
Eliminate=Elimin\u0103
Eliminate.Syntax=[ <List\u0103 polinoame>, <List\u0103 variabile> ]
Ellipse=Elips\u0103
Ellipse.Syntax=[ <Focar>, <Focar>, <Lungime Axa Mare> ]\n[ <Focar>, <Focar>, <Segment> ]\n[ <Focar>, <Focar>, <Punct> ]
Ends=Finaluri
Ends.Syntax=[ <Suprafa\u0163\u0103 de gradul doi> ]
Envelope=Plic
Envelope.Syntax=[ <Cale>, <Punct> ]
Erlang.Syntax=[ <Form\u0103>, <Rat\u0103>, <Valoare Variabil\u0103> ]\n[ <Form\u0103>, <Rat\u0103>, x, <Cumulativ Boolean> ]
Evaluate=evalua
Excentricity=ExcentricitateLiniar\u0103
Excentricity.Syntax=[ <Conic\u0103> ]
Execute=Execut\u0103
Execute.Syntax=[ <List\u0103 de Texte> ]\n[ <List\u0103 de Texte>, <Parametru>, <Parametru>, ... ]
Expand=Dezvolt\u0103
Expand.Syntax=[ <Expresie> ]
Exponential=Exponen\u0163ial
Exponential.Syntax=[ <Lambda>, <Valoare variabil\u0103> ]\n[ <Lambda>, x, <Cumulativ Boolean> ]
Exponential.SyntaxCAS=[ <Lambda>, <Valoare variabil\u0103> ]
Extremum=Extrem
Extremum.Syntax=[ <Polinom> ]
FDistribution=DistribuireF
FDistribution.Syntax=[ <Num\u0103r\u0103tor grade de libertate>, <Numitor grade de libertate>, <Valoare variabil\u0103> ]\n[ <Num\u0103r\u0103tor grade de libertate>, <Numitor grade de libertate>, x, <Cumulativ Boolean> ]
FDistribution.SyntaxCAS=[ <Num\u0103\u0103ator Grade de Libertate>, <Numitor Grade de Libertate>, <Valoare Variabil\u0103> ]
Factor=Factorizeaz\u0103
Factor.Syntax=[ <Polinom> ]
Factor.SyntaxCAS=[ <Polynom> ]\n[ <Expresie>, <Variabil\u0103> ]
Factors=Factori
Factors.Syntax=[ <Polinomial> ]\n[ <Num\u0103r> ]
FillCells=Completeaz\u0103Celule
FillCells.Syntax=[ <Gam\u0103Celule>, <Obiect> ]\n[ <Gam\u0103Celule>, <List\u0103> ]\n[ <Gam\u0103Celule>, <Matrice> ]
FillColumn=Completeaz\u0103Coloan\u0103
FillColumn.Syntax=[ <Coloan\u0103>, <List\u0103> ]
FillRow=Completeaz\u0103Rând
FillRow.Syntax=[ <Rând>, <List\u0103> ]
First=PrimulElement
First.Syntax=[ <List\u0103> ]\n[ <List\u0103>, <Num\u0103rul de elemente> ]
First.SyntaxCAS=[ <List\u0103> ]\n[ <List\u0103>, <Num\u0103rul elementelor> ]
FirstAxis=AxaMare
FirstAxis.Syntax=[ <Conic\u0103> ]
FirstAxisLength=LungimeSemiaxaMare
FirstAxisLength.Syntax=[ <Conic\u0103> ]
Fit=Potrivit
Fit.Syntax=[ <List\u0103 de puncte>, <List\u0103 de func\u0163ii> ]\n[ <List\u0103 de puncte>, <Func\u0163ie> ]
FitExp=RegresieExponen\u0163ial\u0103
FitExp.Syntax=[ <List\u0103 de puncte> ]
FitGrowth=AjustareCre\u0219tere
FitGrowth.Syntax=[ <List\u0103 de puncte> ]
FitImplicit=PotrivireImplicit\u0103
FitImplicit.Syntax=[ <List\u0103 Puncte>, <Ordinul> ]
FitLineX=XDreapt\u0103Regresie
FitLineX.Syntax=[ <List\u0103 de puncte> ]
FitLineY=YDreapt\u0103Regresie
FitLineY.Syntax=[ <List\u0103 de puncte> ]
FitLog=RegresieLogaritmic\u0103
FitLog.Syntax=[ <List\u0103 de puncte> ]
FitLogistic=RegresieLogistic\u0103
FitLogistic.Syntax=[ <List\u0103 de puncte> ]
FitPoly=RegresiePolinomial\u0103
FitPoly.Syntax=[ <List\u0103 de puncte>, <Gradul polinomului> ]
FitPow=RegresieSeriePuteri
FitPow.Syntax=[ <List\u0103 de puncte> ]
FitSin=RegresieSinusoidal\u0103
FitSin.Syntax=[ <List\u0103 de puncte> ]
Flatten=Aplatiza
Flatten.Syntax=[ <List\u0103> ]
Focus=Focar
Focus.Syntax=[ <Conic\u0103> ]
FractionText=TextFrac\u0163ie
FractionText.Syntax=[ <Num\u0103r> ]\n[ <Punct> ]
Frequency=Frecven\u0163\u0103
Frequency.Syntax=[ <List\u0103 Date Brute> ]\n[ <Cumulativ Boolean>, <List\u0103 Date Brute> ]\n[ <List\u0103 Limite de Clase>, <List\u0103 Date Brute> ]\n[ <List\u0103 Text>, <List\u0103 Text> ]\n[ <Cumulativ Boolean>, <List\u0103 Limite de Clase>, <List\u0103 Date Brute> ]\n[ <List\u0103 Limite de Clase>, <List\u0103 Date Brute>, <Densitate true|false>, <Scar\u0103 Densitate (op\u021bional)> ]\n[ <Boolean Cumulative>, <List\u0103 Limite de Clase>, <List\u0103 Date Brute>, <Densitate true|false>, <Scar\u0103 Densitate (op\u021bional)> ]
FrequencyPolygon=PligonFrecve\u0163\u0103
FrequencyPolygon.Syntax=[ <List\u0103 Limite de Clase>, <Lista În\u0103l\u021bimi> ]\n[ <List\u0103 Limite de Clase>, <List\u0103 Date Brute>, <Densitate true|false>, <Scar\u0103 Densitate (op\u021bional> ]\n[ <Boolean Cumulative>, <List of Class Boundaries>, <List\u0103 Date Brute>, <Densitate true|false>, <Scar\u0103 Densitate (op\u021bional> ]
FrequencyTable=TabelFrecve\u0163\u0103
FrequencyTable.Syntax=[ <Lista de date raw>, <Scar\u0103 Factor (op\u021bional)> ]\n[ <Boolean cumulativ>, <Lista de de date raw> ]\n[ <Lista de delimit\u0103rile între clase>, <Lista de de date raw> ]\n[ <Boolean cumulativ>, <Lista de delimit\u0103rile între clase>, <Lista de de date raw> ]\n[ <Lista de delimit\u0103rile între clase>, <Lista de date raw>, <Utilizarea Densitate>, <Scar\u0103 Factor Densitate (op\u021bional)> ]\n[ <Boolean cumulativ>, <Lista de delimit\u0103rile între clase>, <Lista de date raw>, <Utilizarea Densitate>, <Scale Factor Densitate (op\u021bional)> ]
FromBase=DinBaza
FromBase.Syntax=[ "<Num\u0103r ca text>", <Baz\u0103> ]
Function=Func\u0163ie
Function.Syntax=[ <List\u0103 de numere> ]\n[ <Func\u0163ie>, <Valoare-x început>, <Valoare-x sfâr\u015fit> ]
Function.Syntax3D=[ <Lista de numere> ]\n[ <Func\u021bia>, <x-valuare ini\u0163iala>, <x-valuare final\u0103> ]\n[ <Expresie>, <variabila parametru 1>, <Valuare ini\u0163ial\u0103>, <Valuare final\u0103>, <variabila parametru 2>, <Valuare ini\u0163ial\u0103>, <Valuare final\u0103> ]
Function.SyntaxCAS=[ <Func\u021bia>, <x-valuare ini\u0163iala>, <x-valuare final\u0103> ]
FutureValue=ValoareViitoare
FutureValue.Syntax=[ <Rat\u0103>, <Num\u0103r de puncte>, <Plat\u0103>, <Valuare prezent\u0103 (op\u0163ional)>, <Tip (op\u0163ional)> ]
GCD=CMMDC
GCD.Syntax=[ <List\u0103 de Numere> ]\n[ <Num\u0103r>, <Num\u0103r> ]
GCD.SyntaxCAS=[ <List\u0103 de numere> ]\n[ <List\u0103 de polinoame> ]\n[ <Num\u0103r>, <Num\u0103r> ]\n[ <Polinom>, <Polinom> ]
Gamma.Syntax=[ <Alpha>, <Beta>, <Valoare Variabil\u0103> ]\n[ <Alpha>, <Beta>, x, <Cumulativ Boolean> ]
Gamma.SyntaxCAS=[ <Alpha>, <Beta>, <Valoare Variabil\u0103> ]
GeometricMean=MedieGeometric\u0103
GeometricMean.Syntax=[ <List\u0103 de numere> ]
GetTime=Cite\u015fteTimpul
GetTime.Syntax=[ ]\n[ "<Format>" ]
GroebnerDegRevLex.Syntax=[ <List\u0103 polinoame> ]\n[ <List\u0103 polinoame>, <List\u0103 variabile> ]
GroebnerLex.Syntax=[ <List\u0103 polinoame> ]\n[ <List\u0103 polinoame>, <List\u0103 variabile> ]
GroebnerLexDeg.Syntax=[ <List\u0103 polinoame> ]\n[ <List\u0103 polinoame>, <List\u0103 variabile> ]
HarmonicMean=MedieArmonic\u0103
HarmonicMean.Syntax=[ <List\u0103 de numere> ]
Height=în\u0103l\u021bime
Height.Syntax=[ <Corp> ]
HideLayer=AscundeStrat
HideLayer.Syntax=[ <Num\u0103r> ]
Histogram=Histogram\u0103
Histogram.Syntax=[ <List\u0103 Frontierelor de Clas\u0103>, <List\u0103 de În\u0103l\u0163imi> ]\n[ <List\u0103 Frontierelor de Clas\u0103>, <List\u0103 de Date Neprelucrate> ]
HistogramRight=Histogram\u0103Dreapta
HistogramRight.Syntax=[ <List\u0103 Limite de Clase>, <List\u0103 În\u0103l\u021bimi> ]\n[ <List\u0103 Limite de Clase>, <List\u0103 Date Brute>, <Densitate true|false>, <Scar\u0103 Densitate (op\u021bional)> ]\n[ <Boolean Cumulative>, <List\u0103 Limite de Clase>, <List of Raw Data>, <Densitate true|false>, <Scar\u0103 Densitate (op\u021bional)> ]
HyperGeometric=HiperGeometric
HyperGeometric.Syntax=[ <Dimensiune Popula\u021bie>, <Num\u0103r Succese>, <Dimensiune Mostr\u0103> ]\n[ <Dimensiune Popula\u021bie>, <Num\u0103r Succese>, <Dimensiune Mostr\u0103>, <Cumulativ Boolean> ]\n[ <Dimensiune Popula\u021bie>, <Num\u0103r Succese>, <Dimensiune Mostr\u0103>, <Valoare Variabil\u0103>, <Cumulativ Boolean> ]
HyperGeometric.SyntaxCAS=[ <Dimensiune Popula\u021bie>, <Num\u0103r de Succese>, <Dimensiune Mostr\u0103>, <Valoare Varibil\u0103>, <Cumulativ Boolean> ]
Hyperbola=Hiperbol\u0103
Hyperbola.Syntax=[ <Focar>, <Focar>, <Lungime Axa Mare> ]\n[ <Focar>, <Focar>, <Segment> ]\n[ <Punct>, <Punct>, <Punct> ]
IFactor.Syntax=[ <Polinom> ]
IFactor.SyntaxCAS=[ <Expresie> ]\n[ <Expresie>, <Variabil\u0103> ]
Icosahedron=Icosaedru
Icosahedron.Syntax=[ <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Direc\u0163ie> ]
Identity=Identitate
Identity.Syntax=[ <Num\u0103r> ]
If=Dac\u0103
If.Syntax=[ <Condi\u0163ie>, <Atunci> ]\n[ <Condi\u0163ie>, <Atunci>, <Altfel> ]
ImplicitCurve=Curb\u0103Implicit\u0103
ImplicitCurve.Syntax=[ <List\u0103 de puncte> ]\n[ <f(x y)> ]
ImplicitDerivative=Derivat\u0103Implicit\u0103
ImplicitDerivative.Syntax=[ <f(x y)> ]
ImplicitDerivative.SyntaxCAS=[ <f(x y)> ]\n[ <Expresie>, <Variabil\u0103 Dependent\u0103>, <Variabil\u0103 Independent\u0103> ]
Incircle=CercÎnscris
Incircle.Syntax=[ <Punct>, <Punct>, <Punct> ]
IndexOf=IndiceleLui
IndexOf.Syntax=[ <Obiect>, <List\u0103> ]\n[ <Text>, <Text> ]\n[ <Obiect>, <List\u0103>, <Indice de început> ]\n[ <Text>, <Text>, <Indice de început> ]
InfiniteCone=ConInfinit
InfiniteCone.Syntax=[ <Punct>, <Vector>, <Unghi> ]\n[ <Punct>, <Punct>, <Unghi> ]\n[ <Punct>, <Dreapt\u0103>, <Unghi> ]
InfiniteCylinder=CilindruInfinit
InfiniteCylinder.Syntax=[ <Dreapt\u0103>, <Raz\u0103> ]\n[ <Punct>, <Vector>, <Raz\u0103> ]\n[ <Punct>, <Punct>, <Raz\u0103> ]
Insert=Inserare
Insert.Syntax=[ <List\u0103>, <List\u0103>, <Pozi\u0163ie> ]\n[ <Obiect>, <List\u0103>, <Pozi\u0163ie> ]
Integral=Integral\u0103
Integral.Syntax=[ <Func\u0163ie> ]\n[ <Func\u0163ie>, <Valoare Ini\u0163ial\u0103 x>, <Valoare Final\u0103 x> ]\n[ <Func\u0163ie>, <Func\u0163ie>, <Valoare Ini\u0163ial\u0103 x>, <Valoare Final\u0103 x> ]\n[ <Func\u0163ie>, <Valoare Ini\u0163ial\u0103 x>, <Valoare Final\u0103 x>, <Valoare logic\u0103> ]
Integral.SyntaxCAS=[ <Func\u0163ie> ]\n[ <Func\u0163ie>, <Variabil\u0103> ]\n[ <Func\u0163ie>, <Valoare-x început>, <Valoare-x sfâr\u015fit> ]\n[ <Func\u0163ie>, <Variabil\u0103>, <Valoare început>, <Valoare sfâr\u015fit> ]
IntegralBetween=Integral\u0103Între
IntegralBetween.Syntax=[ <Func\u0163ie>, <Func\u0163ie>, <Valoare-x început>, <Valoare-x sfâr\u015fit> ]\n[ <Func\u0163ie>, <Func\u0163ie>, <Valoare-x început>, <Valoare-x sfâr\u015fit>, <Boolean> ]
IntegralBetween.SyntaxCAS=[ <Func\u0163ie>, <Func\u0163ie>, <Valoare-x început>, <Valoare-x sfâr\u015fit> ]\n[ <Func\u0163ie>, <Func\u0163ie>, <Variabil\u0103>, <Valoare început>, <Valoare sfâr\u015fit> ]
Intersect=Intersec\u0163ie
Intersect.Syntax=[ <Obiect>, <Obiect> ]\n[ <Obiect>, <Obiect>, <Num\u0103rul punctului de intersec\u0163ie> ]\n[ <Obiect>, <Obiect>, <Punct ini\u0163ial> ]\n[ <Func\u0163ie>, <Func\u0163ie>, <x-ini\u0163ial>, <x-final> ]\n[ <Curba 1>, <Curba2>, <Parametru 1>, <Parametru 2> ]
Intersect.SyntaxCAS=[ <Func\u0163ie>, <Func\u0163ie> ]
IntersectConic=Intersec\u0163ieConice
IntersectConic.Syntax=[ <Plan>, <Curb\u0103 de gradul doi> ]\n[ <Curb\u0103 de gradul doi>, <Curb\u0103 de gradul doi> ]
IntersectPath=Intersec\u0163ieCurbe
IntersectPath.Syntax=[ <Dreapt\u0103>, <Poligon> ]\n[ <Poligon>, <Poligon> ]
IntersectPath.Syntax3D=[ <Dreapt\u0103>, <Poligon> ]\n[ <Poligon>, <Poligon> ]\n[ <Plan>, <Poligon> ]\n[ <Plan>, <Curb\u0103 de gradul doi> ]
Intersection=Intersec\u0163ie
Intersection.Syntax=[ <List\u0103>, <List\u0103> ]
InverseBinomial=BinomInvers
InverseBinomial.Syntax=[ <Num\u0103r încerc\u0103ri>, <Probabilitatea succesului>, <Probabilitate> ]
InverseCauchy=CauchyInverse
InverseCauchy.Syntax=[ <Median\u0103>, <Scar\u0103>, <Probabilitate> ]
InverseChiSquared=ChiP\u0103tratInvers
InverseChiSquared.Syntax=[ <Grade de libertate>, <Probabilitate> ]
InverseExponential=InversExponen\u021bial
InverseExponential.Syntax=[ <Lambda>, <Probabilitate> ]
InverseFDistribution=Distribu\u021bieFInvers\u0103
InverseFDistribution.Syntax=[ <Num\u0103r\u0103tor grade de libertate>, <Denominator grade de libertate>, <Probabilitate> ]
InverseGamma=GammaInvers
InverseGamma.Syntax=[ <Alpha>, <Beta>, <Probabilitate> ]
InverseHyperGeometric=InversHiperGeometric
InverseHyperGeometric.Syntax=[ <Dimensiune popula\u021bie>, <Num\u0103r de succese>, <Dimensiune mostr\u0103>, <Probabilitate> ]
InverseLaplace=LaplaceInvers
InverseLaplace.Syntax=[ <Func\u0163ie> ]\n[ <Func\u0163ie>, <Variabil\u0103> ]\n[ <Func\u0163ie>, <Variabil\u0103>, <Variabil\u0103> ]
InverseLogNormal=InversLogNormal
InverseLogNormal.Syntax=[ <Medie>, <Devia\u021bia Standard>, <Probabilitate> ]
InverseLogistic=Logistic\u0103Invers\u0103
InverseLogistic.Syntax=[ <Medie>, <Scar\u0103>, <Probabilitate> ]
InverseNormal=NormalaInvers\u0103
InverseNormal.Syntax=[ <Medie>, <Devia\u0163ie standard>, <Probabilitate> ]
InversePascal=PascalInvers
InversePascal.Syntax=[ <Num\u0103r de succese>, <Probabilitate de succes>, <Probabilitate> ]
InversePoisson=PoissonInvers
InversePoisson.Syntax=[ <Medie>, <Probabilitate> ]
InverseTDistribution=Distribu\u021bieTInvers\u0103
InverseTDistribution.Syntax=[ <Grade de libertate>, <Probabilitate> ]
InverseWeibull=WeibullInvers
InverseWeibull.Syntax=[ <Form\u0103>, <Scar\u0103>, <Probabilitate> ]
InverseZipf=ZipfInvers
InverseZipf.Syntax=[ <Num\u0103rul elementelor>, <Exponent>, <Probabilitate> ]
Invert=Invers\u0103
Invert.Syntax=[ <Matrice> ]\n[ <Func\u0163ie> ]
IsInRegion=EsteÎnDomeniu
IsInRegion.Syntax=[ <Punct>, <Domeniu> ]
IsInteger=EsteÎntreg
IsInteger.Syntax=[ <Num\u0103r> ]
IsPrime=EstePrim
IsPrime.Syntax=[ <Num\u0103r> ]
Iteration=Itera\u0163ie
Iteration.Syntax=[ <Func\u0163ie>, <Valoare Ini\u0163ial\u0103>, <Num\u0103r Itera\u0163ii> ]
IterationList=List\u0103Itera\u0163ie
IterationList.Syntax=[ <Func\u0163ie>, <Valoare Ini\u0163ial\u0103>, <Num\u0103r Itera\u0163ii> ]
Join=Une\u015fte
Join.Syntax=[ <List\u0103 de Liste> ]\n[ <List\u0103>, <List\u0103>, ... ]
KeepIf=Men\u0163ineCondi\u0163ie
KeepIf.Syntax=[ <Condi\u0163ie>, <List\u0103> ]\n[ <Condi\u0163ie>, <Variabil\u0103>, <List\u0103> ]
LCM=CMMMC
LCM.Syntax=[ <List\u0103 de numere> ]\n[ <Num\u0103r>, <Num\u0103r> ]
LCM.SyntaxCAS=[ <List\u0103 de numere> ]\n[ <List\u0103 de polinoame> ]\n[ <Num\u0103r>, <Num\u0103r> ]\n[ <Polynom>, <Polynom> ]
LaTeX=LaTeX
LaTeX.Syntax=[ <Obiect> ]\n[ <Obiect> ]
Laplace.Syntax=[ <Func\u0163ie> ]\n[ <Func\u0163ie>, <Variabil\u0103> ]\n[ <Func\u0163ie>, <Variabil\u0103>, <Variabil\u0103> ]
Last=Ultimul
Last.Syntax=[ <List\u0103> ]\n[ <List\u0103>, <Num\u0103r Elemente> ]
Last.SyntaxCAS=[ <List\u0103> ]\n[ <List\u0103>, <Num\u0103r de elemente> ]
LeftSide=MembruStânga
LeftSide.Syntax=[ <Ecua\u0163ie> ]
LeftSide.SyntaxCAS=[ <Ecua\u0163ie> ]\n[ <List\u0103 de ecua\u0163ii> ]\n[ <List\u0103 de ecua\u0163ii>, <Index> ]
LeftSum=Sum\u0103Stânga
LeftSum.Syntax=[ <Func\u021bie>, <x ini\u021bial>, <x final>, <Num\u0103r de dreptunghiuri> ]
Length=Lungime
Length.Syntax=[ <Obiect> ]\n[ <Func\u0163ie>, <Valoare ini\u0163ial\u0103 x>, <Valoare final\u0103 x> ]\n[ <Func\u0163ie>, <Punct ini\u0163ial>, <Punct final> ]\n[ <Curb\u0103>, <Valoare ini\u0163ial\u0103 t>, <Valoare final\u0103 t> ]\n[ <Curb\u0103>, <Punct ini\u0163ial>, <Punct final> ]
Length.SyntaxCAS=[ <Func\u0163ie>, <x-început>, <x-sfâr\u015fit> ]\n[ <Func\u0163ie>, <Variabil\u0103>, <Punct ini\u0163ial>, <Punct final> ]
LetterToUnicode=Liter\u0103Unicod
LetterToUnicode.Syntax=[ "<Liter\u0103>" ]
Limit=Limit\u0103
Limit.Syntax=[ <Func\u0163ie>, <Valoare> ]
Limit.SyntaxCAS=[ <Expresie>, <Valoare> ]\n[ <Expresie>, <Variabil\u0103>, <Valoare> ]
LimitAbove=Limit\u0103Superioar\u0103
LimitAbove.Syntax=[ <Func\u0163ie>, <Valoare> ]
LimitAbove.SyntaxCAS=[ <Expresie>, <Valoare> ]\n[ <Expresie>, <Variabil\u0103>, <Valoare> ]
LimitBelow=Limit\u0103Inferioar\u0103
LimitBelow.Syntax=[ <Func\u0163ie>, <Valoare> ]
LimitBelow.SyntaxCAS=[ <Expresie>, <Valoare> ]\n[ <Expresie>, <Variabil\u0103>, <Valoare> ]
Line=Dreapt\u0103
Line.Syntax=[ <Punct>, <Punct> ]\n[ <Punct>, <Dreapt\u0103 Paralel\u0103> ]\n[ <Punct>, <Vector Direc\u0163ie> ]
LineBisector=Mediatoare
LineBisector.Syntax=[ <Segment> ]\n[ <Punct>, <Punct> ]
LineBisector.Syntax3D=[ <Segment> ]\n[ <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Direc\u0163ie> ]
Locus=LocGeometric
Locus.Syntax=[ <Punct Origine Curb\u0103 Locus>, <Punct> ]\n[ <Punct Origine Curb\u0103 Locus>, <Cursor> ]\n[ <Pant\u0103>, <Punct> ]\n[ <f(x y)>, <Punct> ]
LocusEquation=Ecua\u021bieLocus
LocusEquation.Syntax=[ <Locus> ]\n[ <Punct Locus>, <Punct Mobil> ]
LogNormal.Syntax=[ <Medie>, <Devia\u021bia standard>, <Valoare variabil\u0103> ]\n[ <Medie>, <Devia\u021bia standard>, x, <Cumulativ boolean> ]
Logistic.Syntax=[ <Medie>, <Scar\u0103>, <Valoare variabil\u0103> ]\n[ <Medie>, <Scar\u0103>, x, <Cumulativ boolean> ]
LowerSum=Sum\u0103Inferioar\u0103
LowerSum.Syntax=[ <Func\u0163ie>, <Valoare ini\u0163ial\u0103 x>, <Valoare final\u0103 x>, <Num\u0103r dreptunghiuri> ]
MAD.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
MatrixPlot=MatricePlot
MatrixRank=RangMatrice
MatrixRank.Syntax=[ <Matrice> ]
Max.Syntax=[ <Interval> ]\n[ <List\u0103> ]\n[ <Num\u0103r>, <Num\u0103r> ]\n[ <List\u0103 de date>, <List\u0103 de frecven\u0163e> ]\n[ <Func\u0163ie>, <x ini\u0163ial>, <x final> ]
Max.SyntaxCAS=[ <List\u0103> ]\n[ <Num\u0103r>, <Num\u0103r> ]
Maximize=G\u0103se\u015fteMaxim
Maximize.Syntax=[ <Num\u0103r dependent>, <Num\u0103r independent> ]
Mean=Medie
Mean.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
Mean.SyntaxCAS=[ <List\u0103 de numere> ]
MeanX=MedieX
MeanX.Syntax=[ <List\u0103 de puncte> ]
MeanY=MedieY
MeanY.Syntax=[ <List\u0103 de puncte> ]
Median=Median\u0103
Median.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
Median.SyntaxCAS=[ <List\u0103 de numere> ]
Midpoint=Mijloc
Midpoint.Syntax=[ <Segment> ]\n[ <Conic\u0103> ]\n[ <Punct>, <Punct> ]
Min.Syntax=[ <Interval> ]\n[ <List\u0103> ]\n[ <Num\u0103r>, <Num\u0103r> ]\n[ <List\u0103 de date>, <List\u0103 de frecven\u0163e> ]\n[ <Func\u0163ie>, <x ini\u0163ial>, <x final> ]
Min.SyntaxCAS=[ <List\u0103> ]\n[ <Num\u0103r>, <Num\u0103r> ]
Minimize=G\u0103se\u015fteMinim
Minimize.Syntax=[ <Num\u0103r dependent>, <Num\u0103r independent> ]
MinimumSpanningTree=SpanningTreeMinim
MinimumSpanningTree.Syntax=[ <List\u0103 de Puncte> ]
Mirror=Reflexie
Mirror.Syntax=[ <Obiect>, <Punct> ]\n[ <Obiect>, <Dreapt\u0103> ]\n[ <Punct>, <Cerc> ]
Mirror.Syntax3D=[ <Obiect>, <Punct> ]\n[ <Obiect>, <Dreapt\u0103> ]\n[ <Obiect>, <Plan> ]\n[ <Obiect>, <Cerc> ]
MixedNumber=Num\u0103rFrac\u021bionar
MixedNumber.SyntaxCAS=[ <Num\u0103r> ]
Mod=Rest
Mod.Syntax=[ <Deîmp\u0103r\u0163it>, <Împ\u0103r\u0163itor> ]
Mode=Modul
Mode.Syntax=[ <List\u0103 de numere> ]
NIntegral.SyntaxCAS=[ <Func\u0163ie>, <Valoare-x început>, <Valoare-x sfâr\u015fit> ]\n[ <Func\u0163ie>, <Variabil\u0103>, <Valoare început>, <Valoare sfâr\u015fit> ]
NSolutions=NSolu\u021bii
NSolutions.SyntaxCAS=[ <Ecua\u0163ie> ]\n[ <Ecua\u0163ie>, <Variabil\u0103> ]\n[ <Ecua\u0163ie>, <Variabil\u0103 = valoare ini\u0163ial\u0103> ]\n[ <List\u0103 ecua\u0163ii>, <List\u0103 variabile> ]
NSolve=NRezolv\u0103
NSolve.SyntaxCAS=[ <Ecua\u021bie> ]\n[ <Ecua\u021bie>, <Variabil\u0103> ]\n[ <Ecua\u021bie>, <Variabil\u0103 = valoare ini\u021bial\u0103> ]\n[ <List\u0103 Ecua\u021bii>, <List\u0103 Variabile> ]
NSolveODE=NRezolvareEcua\u021bieDiferen\u021bial\u0103Ordinar\u0103
NSolveODE.Syntax=[ <List\u0103 de derivate>, <x ini\u0163ial>, <List\u0103 de coordonate y ini\u0163iale>, <x final> ]
Name=Nume
Name.Syntax=[ <Obiect> ]
Net.Syntax=[ <Poliedru>, <Num\u0103r> ]\n[ <Poliedru>, <Num\u0103r>, <Fa\u0163\u0103>, <Latur\u0103>, <Latur\u0103>, ... ]
NextPrime=PrimUrm\u0103tor
NextPrime.Syntax=[ <Num\u0103r> ]
Normal=Normal\u0103
Normal.Syntax=[ <Medie>, <Devia\u0163ie standard>, <Valoare variabil\u0103> ]
Normal.SyntaxCAS=[ <Medie>, <Devia\u021bie Standard>, <Valoare Variabil\u0103> ]
NormalQuantilePlot=Schi\u021b\u0103Cuantil\u0103Normal
NormalQuantilePlot.Syntax=[ <List\u0103 date brute> ]
Normalize=Normalizeaz\u0103
Normalize.Syntax=[ <List\u0103 de numere> ]\n[ <List\u0103 de puncte> ]
Numerator=Num\u0103r\u0103tor
Numerator.Syntax=[ <Func\u0163ie> ]
Numerator.SyntaxCAS=[ <Expresie> ]
Numeric.SyntaxCAS=[ <Expresie> ]\n[ <Expresie>, <num\u0103r cifre> ]
Object=Obiect
Object.Syntax=[ <Nume de obiect ca text> ]
Octahedron=Octaedru
Octahedron.Syntax=[ <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Direc\u0163ie> ]
Ordinal.Syntax=[ <Întreg> ]
OrdinalRank=RangOrdinal
OrdinalRank.Syntax=[ <List\u0103> ]
OrthogonalLine=Perpendicular\u0103
OrthogonalLine.Syntax=[ <Punct>, <Dreapt\u0103> ]\n[ <Punct>, <Segment> ]\n[ <Punct>, <Vector> ]
OrthogonalLine.Syntax3D=[ <Punct>, <Dreapt\u0103> ]\n[ <Punct>, <Segment> ]\n[ <Punct>, <Vector> ]\n[ <Punct>, <Plan> ]\n[ <Dreapt\u0103>, <Dreapt\u0103> ]\n[ <Punct>, <Dreapt\u0103>, <Dreapt\u0103> ]\n[ <Punct>, <Vector>, <Vector> ]\n[ <Punct>, <Dreapt\u0103>, <Context> ]
OrthogonalPlane=Planperpendicular
OrthogonalPlane.Syntax=[ <Punct>, <Dreapt\u0103> ]\n[ <Punct>, <Vector> ]
OrthogonalVector=VectorPerpendicular
OrthogonalVector.Syntax=[ <Dreapt\u0103> ]\n[ <Segment> ]\n[ <Vector> ]
OrthogonalVector.Syntax3D=[ <Dreapt\u0103> ]\n[ <Segment> ]\n[ <Vector> ]\n[ <Plan> ]
OsculatingCircle=CercOsculator
OsculatingCircle.Syntax=[ <Punct>, <Obiect> ]
PMCC=CoeficientCorela\u0163ie
PMCC.Syntax=[ <List\u0103 puncte> ]\n[ <List\u0103 coordonate-x>, <List\u0103 coordonate-y> ]
Pan=Mut\u0103
Pan.Syntax3D=[ <x>, <y>, <z> ]
Parabola=Parabol\u0103
Parabola.Syntax=[ <Punct>, <Dreapt\u0103> ]
Parameter=Parametru
Parameter.Syntax=[ <Parabol\u0103> ]
ParametricDerivative=DerivataParametric\u0103
ParametricDerivative.Syntax=[ <Curb\u0103> ]
ParseToFunction=Converte\u015fteÎnFunc\u0163ie
ParseToFunction.Syntax=[ <Func\u0163ie>, <String> ]
ParseToNumber=Converte\u015fteÎnNum\u0103r
ParseToNumber.Syntax=[ <Num\u0103r>, <String> ]
PartialFractions=Frac\u0163iiPar\u0163iale
PartialFractions.Syntax=[ <Func\u0163ie> ]
PartialFractions.SyntaxCAS=[ <Func\u0163ie> ]\n[ <Func\u0163ie>, <Variabil\u0103> ]
Pascal.Syntax=[ <Num\u0103r succese>, <Probabilitate de succes> ]\n[ <Num\u0103r succese>, <Probabilitate de succes>, <Cumulativ boolean> ]\n[ <Num\u0103r succese>, <Probabilitate de succes>, <Valoare variabil\u0103>, <Cumulativ boolean> ]
Pascal.SyntaxCAS=[ <Num\u0103r Succese>, <Probabilitate de Succes>, <Valoare Variabil\u0103>, <Cumulativ Boolean> ]
PathParameter=ParametruCale
PathParameter.Syntax=[ <Punct pe cale> ]
Payment=Plat\u0103
Payment.Syntax=[ <Rat\u0103>, <Num\u0103r de puncte>, <Valuare prezent\u0103>, <Viitoare valuare (op\u0163ional)>, <Tip (op\u0163ional)> ]
Percentile=Func\u021bieReparti\u021bie
Percentile.Syntax=[ <List\u0103 de Numere>, <Procent> ]
Perimeter=Perimetru
Perimeter.Syntax=[ <Poligon> ]\n[ <Conic\u0103> ]
Periods=Perioade
Periods.Syntax=[ <Rat\u0103>, <Plat\u0103>, <Valuare prezent\u0103>, <Viitoare valuare (op\u0163ional)>, <Tip (op\u0163ional)> ]
Plane=Plan
Plane.Syntax=[ <Poligon> ]\n[ <Conic\u0103> ]\n[ <Punct>, <Plan> ]\n[ <Punct>, <Dreapt\u0103> ]\n[ <Dreapt\u0103>, <Dreapt\u0103> ]\n[ <Punct>, <Punct>, <Point> ]
PlaneBisector=PlanBisector
PlaneBisector.Syntax=[ <Segment> ]\n[ <Punct>, <Punct> ]
PlaySound=Red\u0103Sunetul
PlaySound.Syntax=[ <URL> ]\n[ <Boolean> ]\n[ <Func\u0163ie>, <Valoare minim\u0103>, <Valoare maxim\u0103> ]\n[ <Func\u0163ie>, <Valoare minim\u0103>, <Valoare maxim\u0103>, <Rat\u0103 e\u015fantionare>, <Adâncime e\u015fantion> ]
Point=Punct
Point.Syntax=[ <Obiect> ]\n[ <Punct>, <Vector> ]
PointIn=PunctÎn
PointIn.Syntax=[ <Domeniu> ]
PointList=List\u0103Puncte
PointList.Syntax=[ <List\u0103> ]
Poisson.Syntax=[ <Medie> ]\n[ <Medie>, <Cumulativ boolean> ]\n[ <Medie>, <Valoare variabil\u0103>, <Cumulativ boolean> ]
Poisson.SyntaxCAS=[ <Medie>, <Valoare Variabil\u0103>, <Cumulativ Boolean> ]
Polar=Polar\u0103
Polar.Syntax=[ <Punct>, <Conic> ]\n[ <Linie>, <Conic> ]
PolyLine=Liniepoligonal\u0103
PolyLine.Syntax=[ <List\u0103 de Puncte> ]\n[ <Punct>, ..., <Punct> ]
Polygon=Poligon
Polygon.Syntax=[ <Punct>, ..., <Punct> ]\n[ <Punct>, <Punct>, <Num\u0103rul Vârfuri> ]
Polygon.Syntax3D=[ <List\u0103 puncte> ]\n[ <Punct>, ..., <Punct> ]\n[ <Punct>, <Punct>, <Num\u0103r> ]\n[ <Punct>, <Punct>, <Num\u0103r vârfuri>, <Direc\u0163ie> ]
Polynomial=Polinom
Polynomial.Syntax=[ <Func\u0163ie> ]\n[ <List\u0103 de puncte> ]
Polynomial.SyntaxCAS=[ <Func\u0163ie> ]\n[ <Func\u0163ie>, <Variabil\u0103> ]
PresentValue=ValuarePrezent\u0103
PresentValue.Syntax=[ <Rat\u0103>, <Num\u0103r de puncte>, <Plat\u0103>, <Viitoare valuare(op\u0163ional)>, <Tip (op\u0163ional)> ]
PreviousPrime=PrimPrecedent
PreviousPrime.Syntax=[ <Num\u0103r> ]
PrimeFactors=FactoriPrimi
PrimeFactors.Syntax=[ <Num\u0103r> ]
Prism=Prism\u0103
Prism.Syntax=[ <Poligon>, <Punct> ]\n[ <Poligon>, <Valoare în\u0103l\u0163ime> ]\n[ <Punct>, <Punct>, ... ]
Product=Produs
Product.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 de numere>, <Numb\u0103rul elementelor> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
Product.SyntaxCAS=[ <List\u0103 Expresii> ]\n[ <Expresie>, <Variabil\u0103>, <Index Ini\u021bial>, <Index Final> ]
Prove=Demonstreaz\u0103
Prove.Syntax=[ <Expresie  boolean\u0103> ]
ProveDetails=DetaliiDemonstra\u0163ie
ProveDetails.Syntax=[ <Expresie  boolean\u0103> ]
Pyramid=Piramid\u0103
Pyramid.Syntax=[ <Poligon>, <Punct> ]\n[ <Poligon>, <În\u0103l\u0163ime> ]\n[ <Punct>, <Punct>, <Punct>, <Punct>, ... ]
Q1=Q1
Q1.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
Q3=Q3
Q3.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
QuadricSide=Latur\u0103
RSquare=RP\u0103trat
RSquare.Syntax=[ <List\u0103 de Puncte>, <Func\u0163ie> ]
Radius=Raz\u0103
Radius.Syntax=[ <Conic\u0103> ]
Random=Aleator
Random.Syntax=[ <Întreg Minim>, <Întreg Maxim> ]\n[ <Întreg Minim>, <Întreg Maxim>, <Boolean Fix> ]
Random.SyntaxCAS=[ <Întreg Minim>, <Întreg Maxim> ]
RandomBinomial=AleatorBinomial
RandomBinomial.Syntax=[ <Num\u0103r Încerc\u0103ri>, <Probabilitate> ]
RandomElement=ElementAleatoriu
RandomElement.Syntax=[ <List\u0103> ]
RandomNormal=AleatorNormal
RandomNormal.Syntax=[ <Medie>, <Abatere standard> ]
RandomPoisson=AleatorPoisson
RandomPoisson.Syntax=[ <Medie> ]
RandomPolynomial=PolinomAleator
RandomPolynomial.Syntax=[ <Grad>, <Minim pentru Coeficien\u021bi>, <Maxim pentru Coeficien\u021bi> ]
RandomPolynomial.SyntaxCAS=[ <Grad>, <Minim pentru Coeficien\u021bi>, <Maxim pentru Coeficien\u021bi> ]\n[ <Variabil\u0103>, <Grad>, <Minim pentru Coeficien\u021bi>, <Maxim pentru Coeficien\u021bi> ]
RandomUniform=AleatorUniform
RandomUniform.Syntax=[ <Min>, <Max> ]\n[ <Min>, <Max>, <Num\u0103r e\u015fantioane> ]
Rate=Rat\u0103
Rate.Syntax=[ <Num\u0103r de puncte>, <Plat\u0103>, <Valuare prezent\u0103>, <Viitoare valuare(op\u0163ional), <Tip (op\u0163ional)>, <Presupunere (op\u0163ional)> ]
Rationalize=Ra\u021bionalizare
Rationalize.SyntaxCAS=[ <Num\u0103r> ]
Ray=Semidreapt\u0103
Ray.Syntax=[ <Punct ini\u0163ial>, <Punct> ]\n[ <Punct ini\u0163ial>, <Vector direc\u0163ie> ]
RectangleSum=Sum\u0103Dreptunghi
RectangleSum.Syntax=[ <Func\u021bie>, <x ini\u021bial>, <x final>, <Num\u0103r de dreptunghiuri>, <Pozi\u021bie ini\u021bial\u0103 dreptunghi> ]
ReducedRowEchelonForm=MatriceE\u0219alonat\u0103Redus\u0103
ReducedRowEchelonForm.Syntax=[ <Matrice> ]
Relation=Rela\u0163ie
Relation.Syntax=[ <Obiect>, <Obiect> ]
Remove=Scoate
Remove.Syntax=[ <List\u0103>, <List\u0103> ]
RemoveUndefined=Elimin\u0103Nedefinire
RemoveUndefined.Syntax=[ <List\u0103> ]
Rename=Redenumire
Rename.Syntax=[ <Obiect>, <Nume> ]
Repeat=Repeatare
Repeat.Syntax=[ <Num\u0103r>, <Comand\u0103 de scripting>, <Comand\u0103 de scripting>, ... ]
ResidualPlot=PuncteReziduale
ResidualPlot.Syntax=[ <List\u0103 de Puncte>, <Func\u0163ie> ]
Reverse=Inversare
Reverse.Syntax=[ <List\u0103> ]
RightSide=MembruDrept
RightSide.Syntax=[ <Ecua\u0163ie> ]
RightSide.SyntaxCAS=[ <Ecua\u0163ie> ]\n[ <List\u0103 de ecua\u0163ii> ]\n[ <List\u0103 de ecua\u0163ii>, <Index> ]
RigidPolygon=PoligonRigid
RigidPolygon.Syntax=[ <Poligon> ]\n[ <Poligon>, <Decalaj x>, <Decalaj y> ]\n[ <Punct Liber>, ..., <Punct Liber> ]
Root=R\u0103d\u0103cin\u0103
Root.Syntax=[ <Polinom> ]\n[ <Func\u0163ie>, <Valoare ini\u0163ial\u0103-x> ]\n[ <Func\u0163ie>, <Valoare ini\u0163ial\u0103-x>, <Valoare final\u0103-x> ]
Root.SyntaxCAS=[ <Polinom> ]
RootList=List\u0103R\u0103d\u0103cini
RootList.Syntax=[ <List\u0103> ]
RootMeanSquare=MedieP\u0103tratic\u0103
RootMeanSquare.Syntax=[ <List\u0103 de Numere> ]
Roots=R\u0103d\u0103cini
Roots.Syntax=[ <Func\u0163ie>, <Valoare-x început>, <Valoare-x sfâr\u015fit> ]
Rotate=Rota\u0163ie
Rotate.Syntax=[ <Obiect>, <Unghi> ]\n[ <Obiect>, <Unghi>, <Punct> ]
Rotate.Syntax3D=[ <Obiect>, <Unghi> ]\n[ <Obiect>, <Unghi>, <Punct> ]\n[ <Obiect>, <Unghi>, <Axa de rota\u0163ie> ]\n[ <Obiect>, <Unghi>, <Punct pe ax\u0103>, <Direc\u0163ia sau planul axei> ]
RotateText=Rote\u015fteText
RotateText.Syntax=[ <Text>, <Unghi> ]
Row=Linie
Row.Syntax=[ <Celul\u0103 din foaia de calcul> ]
RunClickScript=ExecutaScriptClick
RunClickScript.Syntax=[ <Obiect> ]
RunUpdateScript=ExecutaScriptUpdate
RunUpdateScript.Syntax=[ <Obiect> ]
SD.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
SDX.Syntax=[ <List\u0103 de Puncte> ]
SDY.Syntax=[ <List\u0103 de Puncte> ]
SXX.Syntax=[ <List\u0103 de numere> ]\n[ <List\u0103 de puncte> ]
SXY.Syntax=[ <List\u0103 de puncte> ]\n[ <List\u0103 de numere>, <List\u0103 de numere> ]
SYY.Syntax=[ <List\u0103 de numere> ]\n[ <List\u0103 de puncte> ]
Sample=E\u015fantion
Sample.Syntax=[ <List\u0103>, <M\u0103rime> ]\n[ <List\u0103>, <M\u0103rime>, <Cu înlocuire> ]
SampleSD=Mostr\u0103Devia\u021bieStandard
SampleSD.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
SampleSD.SyntaxCAS=[ <List\u0103 Numere> ]
SampleSDX=Mostr\u0103Devia\u021bieStandardX
SampleSDX.Syntax=[ <List\u0103 de Puncte> ]
SampleSDY=Mostr\u0103Devia\u021bieStandardY
SampleSDY.Syntax=[ <List\u0103 de Puncte> ]
SampleVariance=Mostr\u0103Varia\u021bie
SampleVariance.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
SampleVariance.SyntaxCAS=[ <List\u0103 Numere> ]
ScientificText=Nota\u021bie\u0218tiin\u021bific\u0103
ScientificText.Syntax=[ <Num\u0103r> ]\n[ <Num\u0103r>, <Precizie> ]
SecondAxis=AxaMic\u0103
SecondAxis.Syntax=[ Conic\u0103 ]
SecondAxisLength=LungimeSemiaxaMic\u0103
SecondAxisLength.Syntax=[ Conic\u0103 ]
Sector.Syntax=[ <Conic\u0103>, <Punct>, <Punct> ]\n[ <Conic\u0103>, <Valoare parametru>, <Valoare parametru> ]
Segment.Syntax=[ <Punct>, <Punct> ]\n[ <Punct>, <Lungime> ]
SelectObjects=AlegeObiect
SelectObjects.Syntax=[ ]\n[ <Obiect>, <Obiect>, ... ]
SelectedElement=ElementSelectat
SelectedElement.Syntax=[ <List\u0103> ]
SelectedIndex=IndiceSelectat
SelectedIndex.Syntax=[ <List\u0103> ]
Semicircle=Semicerc
Semicircle.Syntax=[ <Punct>, <Punct> ]
Sequence=Secven\u0163\u0103
Sequence.Syntax=[ <Expresie>, <Variabil\u0103>, <Valoare ini\u0163ial\u0103>, <Valoare final\u0103> ]\n[ <Expresie>, <Variabil\u0103>, <Valoare ini\u0163ial\u0103>, <Valoare final\u0103>, <Pas> ]
SetActiveView=Seteaz\u0103FereastraActiv\u0103
SetActiveView.Syntax=[ <Fereastra> ]
SetAxesRatio=Seteaz\u0103RaportAxe
SetAxesRatio.Syntax=[ <Num\u0103r>, <Num\u0103r> ]
SetAxesRatio.Syntax3D=[ <Num\u0103r>, <Num\u0103r> ]\n[ <Num\u0103r>, <Num\u0103r>, <Num\u0103r> ]
SetBackgroundColor=Seteaz\u0103CuloareFundal
SetBackgroundColor.Syntax=[ <Obiect>, "<Culoare>" ]\n[ <Obiect>, <Ro\u015fu>, <Verde>, <Albastru> ]
SetCaption=Seteaz\u0103Legend\u0103
SetCaption.Syntax=[ <Obiect>, <Text> ]
SetColor=Seteaz\u0103Culoare
SetColor.Syntax=[ <Obiect>, "<Culoare>" ]\n[ <Obiect>, <Ro\u015fu>, <Verde>, <Albastru> ]
SetConditionToShowObject=Seteaz\u0103Condi\u0163ieAr\u0103tareObiect
SetConditionToShowObject.Syntax=[ <Obiect>, <Condi\u0163ie> ]
SetConstructionStep.Syntax=[ <Num\u0103r> ]
SetCoords=Seteaz\u0103Coordonate
SetCoords.Syntax=[ <Obiect>, <x>, <y> ]
SetDynamicColor=Seteaz\u0103CuloareDinamic\u0103
SetDynamicColor.Syntax=[ <Obiect>, <Ro\u015fu>, <Verde>, <Albastru> ]\n[ <Obiect>, <Ro\u015fu>, <Verde>, <Albastru>, <Opacitate> ]
SetFilling=DefinireUmplere
SetFilling.Syntax=[ <Obiect>, <Num\u0103r> ]
SetFixed=Seteaz\u0103Fixat
SetFixed.Syntax=[ <Obiect>, <true | false> ]
SetLabelMode=Seteaz\u0103StilEtichet\u0103
SetLabelMode.Syntax=[ <Obiect>, <Num\u0103r> ]
SetLayer=Seteaz\u0103Strat
SetLayer.Syntax=[ <Obiect>, <Strat> ]
SetLineStyle=Seteaz\u0103StilDreapt\u0103
SetLineStyle.Syntax=[ <Dreapt\u0103>, <Num\u0103r> ]
SetLineThickness=Seteaz\u0103GrosimeDreapt\u0103
SetLineThickness.Syntax=[ <Dreapt\u0103>, <Num\u0103r> ]
SetPerspective=SetarePerspectiv\u0103
SetPointSize=Seteaz\u0103M\u0103rimePunct
SetPointSize.Syntax=[ <Obiect>, <Num\u0103r> ]
SetPointStyle=Seteaz\u0103StilPunct
SetPointStyle.Syntax=[ <Punct>, <Num\u0103r> ]
SetSeed=DefinireÎnceputAleatoriu
SetSeed.Syntax=[ <Întreg> ]
SetSpinSpeed=SetareVitez\u0103Rotire
SetSpinSpeed.Syntax=[ <Num\u0103r> ]
SetTooltipMode=Seteaz\u0103ModSugestii
SetTooltipMode.Syntax=[ <Obiect>, <Num\u0103r> ]
SetTrace=DefinireUrm\u0103
SetTrace.Syntax=[ <Obiect>, <true | false> ]
SetValue=Seteaz\u0103Valoare
SetValue.Syntax=[ <Boolean>, <0|1> ]\n[ <Obiect>, <Obiect> ]\n[ <List\u0103>, <Num\u0103r>, <Obiect> ]
SetViewDirection=SetareDirec\u0163ieVizualizare
SetViewDirection.Syntax=[ <Direc\u0163ie> ]
SetVisibleInView=Seteaz\u0103VizibilÎnFereastra
SetVisibleInView.Syntax=[ <Obiect>, <Fereastra num\u0103rul 1|2>, <Boolean> ]
Shear=Foarfece
Shear.Syntax=[ <Obiect>, <Dreapt\u0103>, <Ra\u0163ie> ]
ShortestDistance=Distan\u0163aMinim\u0103
ShortestDistance.Syntax=[ <List\u0103 de segmente>, <Punct de început>, <Punct de sfâr\u015fit>, <Boolean ponderat\u0103> ]
ShowAxes=Arat\u0103Axe
ShowAxes.Syntax=[ ]\n[ <Boolean> ]\n[ <Vizualizare>, <Boolean> ]
ShowGrid=Arat\u0103Gril\u0103
ShowGrid.Syntax=[ ]\n[ <Boolean> ]\n[ <Vizualizare>, <Boolean> ]
ShowLabel=Arat\u0103Etichet\u0103
ShowLabel.Syntax=[ <Obiect>, <Boolean> ]
ShowLayer=Arat\u0103Strat
ShowLayer.Syntax=[ <Num\u0103r> ]
Shuffle=Amestec\u0103
Shuffle.Syntax=[ <List\u0103> ]
SigmaXX.Syntax=[ <List\u0103 Puncte> ]\n[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
SigmaXY.Syntax=[ <List\u0103 de puncte> ]\n[ <List\u0103 de coordonate-x>, <List\u0103 de coordonate-y> ]
SigmaYY.Syntax=[ <List\u0103 de numere> ]\n[ <List\u0103 de puncte> ]
Simplify=Simplificare
Simplify.Syntax=[ <Func\u0163ie> ]
Simplify.SyntaxCAS=[ <Func\u0163ie> ]
Slider=Cursor
Slider.Syntax=[ <Min>, <Max>, <Increment>, <Vitez\u0103>, <L\u0103\u0163ime>, <Este unghi>, <Orizontal>, <Anima\u0163ie>, <Random> ]
Slope=Pant\u0103
Slope.Syntax=[ <Dreapt\u0103> ]
SlopeField=CâmpVectorial
SlopeField.Syntax=[ <f(x y)> ]\n[ <f(x y)>, <Num\u0103r n> ]\n[ <f(x y)>, <Num\u0103r n>, <Multiplicator Lungime a> ]\n[ <f(x y)>, <Num\u0103r n>, <Multiplicator Lungime a>, <Min x>, <Min y>, <Max x>, <Max y> ]
SlowPlot=CreareGrafic
SlowPlot.Syntax=[ <Func\u0163ie> ]
Solutions=Solu\u0163ie
Solutions.SyntaxCAS=[ <Ecua\u0163ie> ]\n[ <Ecua\u0163ie>, <Variabil\u0103> ]\n[ <List\u0103 de ecua\u0163ii>, <List\u0103 de variabile> ]
Solve=Rezolv\u0103
Solve.SyntaxCAS=[ <Ecua\u0163ie în x> ]\n[ <Ecua\u0163ie>, <Variabil\u0103> ]\n[ <List\u0103 de ecua\u0163ii>, <List\u0103 de variabile> ]
SolveCubic=Rezolv\u0103GradulTrei
SolveCubic.SyntaxCAS=[ <Polinom de gradul trei> ]
SolveODE=RezolvareEcua\u021bieDiferen\u021bial\u0103Ordinar\u0103
SolveODE.Syntax=[ <f'(x y)> ]\n[ <f'(x y)>, <Punct pe f> ]\n[ <f'(x y)>, <x ini\u0163ial>, <y ini\u0163ial>, <x final>, <Pas> ]\n[ <y'>, <x'>, <x ini\u0163ial>, <y ini\u0163ial>, <t final>, <Pas> ]\n[ <b(x)>, <c(x)>, <f(x)>, <x ini\u0163ial>, <y ini\u0163ial>, <y' ini\u0163ial>, <x final>, <Pas> ]
SolveODE.SyntaxCAS=[ <Ecua\u021bie> ]\n[ <Ecua\u021bie>, <Punct(e) pe f> ]\n[ <Ecua\u021bie>, <Punct(e) pe f>, <Punct(e) pe f'> ]\n[ <Ecua\u021bie>, <Variabil\u0103 Dependent\u0103>, <Variabil\u0103 Independent\u0103>, <Punct(e) pe f> ]\n[ <Ecua\u021bie>, <Variabil\u0103 Dependent\u0103>, <Variabil\u0103 Independent\u0103>, <Punct(e) pe f>, <Punct(e) pe f'> ]
SolveQuartic=Rezolv\u0103GradulPatru
SolveQuartic.SyntaxCAS=[ <Poinom de gradul patru> ]
Sort=Sorteaz\u0103
Sort.Syntax=[ <List\u0103> ]\n[ <Valori>, <Chei> ]
Spearman.Syntax=[ <List\u0103 de Puncte> ]\n[ <List\u0103 de Numere>, <List\u0103 de Numere> ]
Sphere=Sfer\u0103
Sphere.Syntax=[ <Punct>, <Raz\u0103> ]\n[ <Punct>, <Punct> ]
Spline.Syntax=[ <List\u0103 de puncte> ]\n[ <List\u0103>, <Ordinul \u2265 3> ]
StartAnimation=ÎncepeAnima\u0163ie
StartAnimation.Syntax=[ ]\n[ <Boolean> ]\n[ <Cursor sau punct>, <Cursor sau punct>, ... ]\n[ <Cursor sau punct>, <Cursor sau punct>, ..., <Boolean> ]
StartLogging=StartÎnregistrare
StartLogging.Syntax=[ "<Senzor>", <Variabil\u0103>, "<Senzor>", <Variabil\u0103>, ... ]
StartRecord=StartMemorare
StartRecord.Syntax=[ ]\n[ <Bolean> ]
StemPlot=Diagram\u0103Stem
StemPlot.Syntax=[ <List\u0103> ]\n[ <List\u0103>, <Ajustare -1|0|1> ]
StepGraph=Diagram\u0103Fier\u0103str\u0103u
StepGraph.Syntax=[ <List\u0103 Puncte> ]\n[ <List\u0103 Puncte>, <Join Boolean> ]\n[ <List\u0103 coordinate x>, <List\u0103 coordinate y> ]\n[ <List\u0103 Puncte>, <Join Boolean>, <Stil Puncte> ]\n[ <List\u0103 coordinate x>, <List\u0103 coordinate y>, <Join Boolean> ]\n[ <List\u0103 coordinate x>, <List\u0103 coordinate y>, <Join Boolean>, <Stil Puncte> ]
StickGraph=GraficBatoane
StickGraph.Syntax=[ <List\u0103 puncte> ]\n[ <List\u0103 puncte>, <Boolean orizontal> ]\n[ <List\u0103 coordinate x>, <List\u0103 coordinate y> ]\n[ <List\u0103 coordinate x>, <List\u0103 coordinate y>, <Boolean orizontal> ]
StopLogging=StopÎnregistrare
StopLogging.Syntax=[ ]
Stretch=Întinde
Stretch.Syntax=[ <Obiect>, <Vector> ]\n[ <Obiect>, <Vector> <Ra\u0163ie> ]
Substitute=Substituie
Substitute.SyntaxCAS=[ <Expresie>, <List\u0103 substitu\u0163ie> ]\n[ <Expresie>, <de la>, <la> ]
Sum=Sum\u0103
Sum.Syntax=[ <List\u0103> ]\n[ <List\u0103>, <Num\u0103r de elemente> ]\n[ <List\u0103>, <List\u0103 de frecven\u0163e> ]
Sum.SyntaxCAS=[ <List\u0103> ]\n[ <Expresie>, <Variabil\u0103>, <Valoare început>, <Valoare sfâr\u015fit> ]
SumSquaredErrors=Sum\u0103EroriP\u0103tratice
SumSquaredErrors.Syntax=[ <List\u0103 de Puncte>, <Func\u0163ie> ]
SurdText=TextMatematic
SurdText.Syntax=[ <Punct> ]\n[ <Num\u0103r> ]\n[ <Num\u0103r>, <List\u0103> ]
Surface=Suprafa\u0163a
Surface.Syntax=[ <Expresie>, <Expresie>, <Expresie>, <Variabil\u0103 parametru 1>, <Valoare ini\u0163ial\u0103>, <Valoare final\u0103>, <Variabil\u0103 parametru 2>, <Valoare ini\u0163ial\u0103>, <Valoare final\u0103> ]
TDistribution=TDistribu\u021bie
TDistribution.Syntax=[ <Grade de libertate>, <Valoare variabil\u0103> ]\n[ <Grade de libertate>, x, <Cumulativ boolean> ]
TDistribution.SyntaxCAS=[ <Grad de libertate>, <Valoare variabil\u0103> ]
TMean2Estimate.Syntax=[ <List\u0103 date mostr\u0103 1>, <List\u0103 date mostr\u0103 2>, <Nivel>, <Agregat (true | false)> ]\n[ <Medie mostr\u0103 1>, <Devia\u021bie standard mostr\u0103 1>, <Dimensiune mostr\u0103 1>, <Medie mostr\u0103 2>, <Devia\u021bie standard mostr\u0103 2>, <Dimensiune mostr\u0103 2>, <Nivel>, <Agregat (true | false)> ]
TMeanEstimate=TMedieEstimat
TMeanEstimate.Syntax=[ <List\u0103 date mostr\u0103>, <Nivel> ]\n[ <Medie mostr\u0103>, <Devia\u021bie standard mostr\u0103>, <Dimensiune mostr\u0103>, <Nivel> ]
TTest.Syntax=[ <List\u0103 date mostr\u0103>, <Medie ipotetizat\u0103>, <Coad\u0103> ]\n[ <Medie mostr\u0103>, <Devia\u021bie standard mostr\u0103>, <Dimensiune mostr\u0103>, <Medie ipotetizat\u0103>, <Coad\u0103> ]
TTest2.Syntax=[ <List\u0103 date mostr\u0103 1>, <List\u0103 date mostr\u0103 2>, <Coad\u0103>, <Agregat (true | false)> ]\n[ <Medie mostr\u0103 1>, <Devia\u021bie standard mostr\u0103 1>, <Dimensiune mostr\u0103 1>, <Medie mostr\u0103 2>, <Devia\u021bie standard mostr\u0103 2>, <Dimensiune mostr\u0103 2>, <Coad\u0103>, <Agregat (true | false)> ]
TTestPaired=TTestÎmperecheat
TTestPaired.Syntax=[ <List\u0103 date mostr\u0103 1>, <List\u0103 date mostr\u0103 2>, <Coad\u0103> ]
TableText=TextTabel
TableText.Syntax=[ <List\u0103>, <List\u0103>, ... ]\n[ <List\u0103>, <List\u0103>, ..., <Aliniere text> ]
Take=Extrage
Take.Syntax=[ <List\u0103>, <Pozi\u0163ie început> ]\n[ <Text>, <Pozi\u0163ie început> ]\n[ <List\u0103>, <Pozi\u0163ie început>, <Pozi\u0163ie sfâr\u015fit> ]\n[ <Text>, <Pozi\u0163ie început>, <Pozi\u0163ie sfâr\u015fit> ]
Take.SyntaxCAS=[ <List\u0103>, <Pozi\u0163ie început>, <Pozi\u0163ie sfâr\u015fit> ]
Tangent=Tangent\u0103
Tangent.Syntax=[ <Punct>, <Conic\u0103> ]\n[ <Punct>, <Func\u0163ie> ]\n[ <Punct>, <Curb\u0103> ]\n[ <Valoare-x>, <Func\u0163ie> ]\n[ <Dreapt\u0103 paralel\u0103>, <Conic\u0103> ]\n[ <Segment paralel>, <Conic\u0103> ]
TaylorSeries=SerieTaylor
TaylorSeries.Syntax=[ <Func\u0163ie>, <Valoare-x>, <Num\u0103r ordine> ]
TaylorSeries.SyntaxCAS=[ <Expresie>, <Valoare x>, <Ordine> ]\n[ <Expresie>, <Variabil\u0103>, <Valoare variabil\u0103>, <Ordine> ]
Tetrahedron=Tetraedru
Tetrahedron.Syntax=[ <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Punct> ]\n[ <Punct>, <Punct>, <Direc\u0163ie> ]
Text.Syntax=[ <Obiect> ]\n[ <Obiect>, <Boolean la Înlocuire a variabilei>\n[ <Obiect>, <Punct> ]\n[ <Obiect>, <Punct>, <Boolean la Înlocuire a variabilei> ]
TextToUnicode=TextÎnUnicod
Textfield=C\u0103su\u021b\u0103Intrare
Textfield.Syntax=[ ]\n[ <Obiect legat> ]
TiedRank=RangLegat
TiedRank.Syntax=[ <List\u0103> ]
ToBase=ÎnBaza
ToBase.Syntax=[ <Num\u0103r>, <Baz\u0103> ]
ToComplex=ÎnComplex
ToExponential=ÎnExponen\u021bial
ToExponential.SyntaxCAS=[ <Num\u0103r complex> ]
ToPoint=ÎnPunct
ToPoint.Syntax=[ <Num\u0103r complex> ]
ToPolar=ÎnPolar
ToPolar.Syntax=[ <Num\u0103r complex> ]\n[ <Vector> ]
ToolImage=InstrumentImagine
ToolImage.Syntax=[ <Num\u0103r> ]
Top=BazaSuperioar\u0103
Top.Syntax=[ <Cvadratic\u0103> ]
Translate=Transla\u0163ie
Translate.Syntax=[ <Obiect>, <Vector> ]\n[ <Vector>, <Punct ini\u0163ial> ]
Transpose=Transpus\u0103
Transpose.Syntax=[ <Matrice> ]
TrapezoidalSum=Sum\u0103Trapezoidal\u0103
TrapezoidalSum.Syntax=[ <Func\u0163ie>, <Valoare ini\u0163iala-x>, <Valoare final\u0103-x>, <Num\u0103r trapeze> ]
TravelingSalesman=ComisVoiajor
TravelingSalesman.Syntax=[ <List\u0103 de puncte> ]
TriangleCenter=CentruTriunghi
TriangleCenter.Syntax=[ <Punct>, <Punct>, <Punct>, <Num\u0103r> ]
TriangleCurve=Curb\u0103Triunghi
TriangleCurve.Syntax=[ <Punct>, <Punct>, <Punct>, <Ecua\u0163ie> ]
Triangular=Triunghiular
Triangular.Syntax=[ <Limit\u0103 inferioar\u0103>, <Limit\u0103 superioar\u0103>, <Mode>, <Valoare variabil\u0103> ]\n[ <Limit\u0103 inferioar\u0103>, <Limit\u0103 superioar\u0103>, <Mode>, x, <Cumulativ Boolean> ]
TrigCombine=Combin\u0103Trigo
TrigCombine.Syntax=[ <Expresie> ]\n[ <Expresie>, <Func\u021bie \u021bint\u0103> ]
TrigExpand=Dezvolt\u0103Trigo
TrigExpand.Syntax=[ <Expresie> ]\n[ <Expresie>, <Func\u021bie \u021bint\u0103> ]
TrigExpand.SyntaxCAS=[ <Expresie> ]\n[ <Expresie>, <Func\u021bie \u021bint\u0103> ]\n[ <Expresie>, <Func\u021bie \u021bint\u0103>, <Variabil\u0103 \u021bint\u0103> ]\n[ <Expresie>, <Func\u021bie \u021bint\u0103>, <Variabil\u0103 \u021bint\u0103>, <Variabil\u0103 \u021bint\u0103> ]
TrigSimplify=Simplific\u0103Trigo
TrigSimplify.Syntax=[ <Expresie> ]
Trilinear=Triliniar
Trilinear.Syntax=[ <Punct>, <Punct>, <Punct>, <Num\u0103r>, <Num\u0103r>, <Num\u0103r> ]
TurningPoint=PunctInflexiune
TurningPoint.Syntax=[ <Polinom> ]
Turtle=\u0162estoasa
Turtle.Syntax=[ ]
TurtleBack=\u0162estoasaÎnapoi
TurtleBack.Syntax=[ <\u0162estoasa>, <Distan\u0163a> ]
TurtleDown=\u0162estoas\u0103Jos
TurtleDown.Syntax=[ <\u0162estoas\u0103> ]
TurtleForward=\u0162estoasaÎnainte
TurtleForward.Syntax=[ <\u0162estoasa>, <Distan\u0163a> ]
TurtleLeft=\u0162estoasaStânga
TurtleLeft.Syntax=[ <\u0162estoasa>, <Unghi> ]
TurtleRight=\u0162estoasaDreapta
TurtleRight.Syntax=[ <\u0162estoasa>, <Unghi> ]
TurtleUp=\u0162estoas\u0103Sus
TurtleUp.Syntax=[ <\u0162estoas\u0103> ]
UnicodeToLetter=UnicodÎnLiter\u0103
UnicodeToLetter.Syntax=[ <Întreg> ]
UnicodeToText=UnicodÎnText
UnicodeToText.Syntax=[ <List\u0103 întregi> ]
Uniform.Syntax=[ <Limit\u0103 inferioar\u0103>, <Limit\u0103 superioar\u0103>, <Valoare variabil\u0103> ]\n[ <Limit\u0103 inferioar\u0103>, <Limit\u0103 superioar\u0103>, x, <Cumulativ Boolean> ]
Union=Uniune
Union.Syntax=[ <List\u0103>, <List\u0103> ]\n[ <Poligon>, <Poligon> ]
Unique=Unic
Unique.Syntax=[ <List\u0103> ]
UnitOrthogonalVector=VectorUnitatePerpendicular
UnitOrthogonalVector.Syntax=[ <Dreapt\u0103> ]\n[ <Segment> ]\n[ <Vector> ]
UnitOrthogonalVector.Syntax3D=[ <Dreapt\u0103> ]\n[ <Segment> ]\n[ <Vector> ]\n[ <Plan> ]
UnitVector=VectorUnitate
UnitVector.Syntax=[ <Obiect> ]
UpdateConstruction=ActualizareConstruc\u0163ie
UpdateConstruction.Syntax=[ ]\n[ <num\u0103r de ori> ]
UpperSum=Sum\u0103Superioar\u0103
UpperSum.Syntax=[ <Func\u0163ie>, <Valoare ini\u0163ial\u0103 - x>, <Valoare final\u0103 - x>, <Num\u0103r dreptunghiuri> ]
Variance=Varian\u0163\u0103
Variance.Syntax=[ <List\u0103 date brute> ]\n[ <List\u0103 numere>, <List\u0103 frecven\u021be> ]
Variance.SyntaxCAS=[ <List\u0103 de numere> ]
Vector.Syntax=[ <Punct> ]\n[ <Punct ini\u0163ial>, <Punct final> ]
Vertex=Vârf
Vertex.Syntax=[ <Conic> ]\n[ <Inegalitate> ]\n[ <Poligon> ]\n[ <Poligon>, <Index> ]
VerticalText=TextVertical
VerticalText.Syntax=[ <Text> ]\n[ <Text>, <Punct> ]
Volume=Volum
Volume.Syntax=[ <Corp> ]
Voronoi.Syntax=[ <List\u0103 de puncte> ]
Weibull.Syntax=[ <Form\u0103>, <Parametru scalare>, <Valoare variabil\u0103> ]\n[ <Form\u0103>, <Parametru scalare>, x, <Boolean cumulat> ]
Weibull.SyntaxCAS=[ <Form\u0103>, <Scar\u0103>, <Valoare variabila> ]
ZMean2Estimate=ZMedie2Estimare
ZMean2Estimate.Syntax=[ <List\u0103 date e\u0219antion 1>, <List\u0103 date e\u0219antion 2>, <\u03c31>, <\u03c32>, <Nivel> ]\n[ <Medie e\u0219antion 1>, <\u03c31>, <Dimensiune e\u0219antion 1>, <Medie e\u0219antion 2>, <\u03c32>, <Dimensiune e\u0219antion 2>, <Nivel> ]
ZMean2Test=ZMedie2Test
ZMean2Test.Syntax=[ <List\u0103 date e\u0219antion 1>, <\u03c31>, <List\u0103 date e\u0219antion 2>, <\u03c32>, <Coad\u0103> ]\n[ <Medie e\u0219antion 1>, <\u03c31>, <Dimensiune e\u0219antion 1>, <Medie e\u0219antion 2>, <\u03c32>, <Dimensiune e\u0219antion 2>, <Coad\u0103> ]
ZMeanEstimate=ZMedieEstimare
ZMeanEstimate.Syntax=[ <List\u0103 date e\u0219antion>, <\u03c3>, <Nivel> ]\n[ <Medie e\u0219antion>, <\u03c3>, <Dimensiune e\u0219antion>, <Nivel> ]
ZMeanTest=ZMedieTest
ZMeanTest.Syntax=[ <List\u0103 date e\u0219antion>, <\u03c3>, <Medie ipotetic\u0103>, <Coad\u0103> ]\n[ <Medie e\u0219antion>, <\u03c3>, <Dimensiune e\u0219antion>, <Medie ipotetic\u0103>, <Coad\u0103> ]
ZProportion2Estimate=ZPropor\u021bie2Estimare
ZProportion2Estimate.Syntax=[ <Propor\u021bie e\u0219antion 1>, <Dimensiune e\u0219antion 1>, <Propor\u021bie e\u0219antion 2>, <Dimensiune e\u0219antion 2>, <Nivel> ]
ZProportion2Test=ZPropor\u021bie2Test
ZProportion2Test.Syntax=[ <Propor\u021bie e\u0219antion 1>, <Dimensiune e\u0219antion 1>, <Propor\u021bie e\u0219antion 2>, <Dimensiune e\u0219antion 2>, <Coad\u0103> ]
ZProportionEstimate=ZPropor\u021bieEstimare
ZProportionEstimate.Syntax=[ <Propor\u021bite e\u0219antion>, <Dimensiune e\u0219antion>, <Nivel> ]
ZProportionTest=ZPropor\u021bieTest
ZProportionTest.Syntax=[ <Propor\u021bie e\u0219anton>, <Dimensiune e\u0219antion>, <Propor\u021bie ipotetic\u0103>, <Coad\u0103> ]
Zip.Syntax=[ <Expresie>, <Var1>, <List\u01031>, <Var2>, <List\u01032>, ... ]
Zipf.Syntax=[ <Num\u0103r de elemente>, <Exponent> ]\n[ <Num\u0103r de elemente>, <Exponent>, <Boolean cumulat> ]\n[ <Num\u0103r de elemente>, <Exponent>, <Valoare variabil\u0103>, <Boolean cumulat> ]
Zipf.SyntaxCAS=[ <Num\u0103r de elemente>, <Exponent>, <Valoare variabil\u0103>, <Cumulativ Boolean> ]
ZoomIn=Apropiere
ZoomIn.Syntax=[ <Factor scalare> ]\n[ <Factor scalare>, <Punct centru> ]\n[ <Min x>, <Min y>, <Max x>, <Max y> ]
ZoomOut=Îndep\u0103rtare
ZoomOut.Syntax=[ <Factor dimensiune> ]\n[ <Factor dimensiune>, <Punct centru> ]
mean.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
mean.SyntaxCAS=[ <List\u0103 de numere> ]
nCr.Syntax=[ <Num\u0103r n>, <Num\u0103r r> ]
stdev.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
stdevp.Syntax=[ <List\u0103 Date Brute> ]\n[ <List\u0103 Numere>, <List\u0103 Frecven\u021be> ]
stdevp.SyntaxCAS=[ <List\u0103 Numere> ]