# Copyright (c) GeoGebra Group, office@geogebra.org
# The GeoGebra language files are licensed to you under the terms of the
# Creative Commons Attribution-NonCommercial-ShareAlike licence (version 3.0 or later),
# the current text of which can be found via this link:
# https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode.
# Attribution (as required by that Creative Commons license) should take the form of
# (at least) a mention of our name, an appropriate copyright notice and a link to our
# website located at https://www.geogebra.org.
# For further details, please see https://www.geogebra.org/license
Asymptote.Syntax=[ <Conic> ]\n[ <Function> ]\n[ <Implicit Curve> ]
BarCode.Syntax=[ ]\n[ <Image> ]\n[ <Text or Number>, "<Format (optional)>", "<Error Correction (optional)>", <Width (optional)>, <Height (optional)> ]
Cauchy.Syntax=[ <Median>, <Scale>, <Variable Value> ]\n[ <Median>, <Scale>, x, <Boolean Cumulative> ]
ChiSquared.Syntax=[ <Degrees of Freedom>, <Variable Value> ]\n[ <Degrees of Freedom>, x, <Boolean Cumulative> ]
Circle.Syntax3D=[ <Point>, <Radius Number> ]\n[ <Point>, <Segment> ]\n[ <Point>, <Point> ]\n[ <Line>, <Point> ]\n[ <Point>, <Point>, <Point> ]\n[ <Point>, <Radius>, <Direction> ]\n[ <Point>, <Point>, <Direction> ]
Cone.Syntax=[ <Circle>, <Height> ]\n[ <Point>, <Point>, <Radius> ]
ContingencyTable.Syntax=[ <List of Text>, <List of Text> ]\n[ <List of Text>, <List of Text>, <Options> ]\n[ <List of Row Values>, <List of Column Values>, <Frequency Table> ]\n[ <List of Row Values>, <List of Column Values>, <Frequency Table>, <Options> ]
Cube.Syntax=[ <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
Curvature.Syntax=[ <Point>, <Function> ]\n[ <Point>, <Curve> ]
CurvatureVector.Syntax=[ <Point>, <Function> ]\n[ <Point>, <Curve> ]
Denominator.Syntax=[ <Function> ]
Distance.Syntax=[ <Point>, <Object> ]\n[ <Line>, <Line> ]
Dodecahedron.Syntax=[ <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
DynamicCoordinates.Syntax=[ <Point>, <Number>, <Number> ]
Ellipse.Syntax=[ <Focal Point>, <Focal Point>, <Semimajor Axis Length> ]\n[ <Focal Point>, <Focal Point>, <Segment> ]\n[ <Point>, <Point>, <Point> ]
Erlang.Syntax=[ <Shape>, <Rate>, <Variable Value> ]\n[ <Shape>, <Rate>, x, <Boolean Cumulative> ]
Execute.Syntax=[ <List of Texts> ]\n[ <List of Texts>, <Parameter>, <Parameter>, ... ]
Exponential.Syntax=[ <Lambda>, <Variable Value> ]\n[ <Lambda>, x, <Boolean Cumulative> ]
FDistribution.Syntax=[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, <Variable Value> ]\n[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, x, <Boolean Cumulative> ]
Factor.SyntaxCAS=[ <Polynomial> ]\n[ <Expression>, <Variable> ]
FitPoly.Syntax=[ <List of Points>, <Degree of Polynomial> ]
Function.Syntax=[ <List of Numbers> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
Function.Syntax3D=[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Expression>, <Parameter Variable 1>, <Start Value>, <End Value>, <Parameter Variable 2>, <Start Value>, <End Value> ]
Gamma.Syntax=[ <Alpha>, <Beta>, <Variable Value> ]\n[ <Alpha>, <Beta>, x, <Boolean Cumulative> ]
GetTime.Syntax=[ ]\n[ "<Format>" ]
HistogramRight.Syntax=[ <List of Class Boundaries>, <List of Heights> ]\n[ <List of Class Boundaries>, <List of Raw Data>, <Use Density>, <Density Scale Factor (optional)> ]\n[ <Boolean Cumulative>, <List of Class Boundaries>, <List of Raw Data>, <Use Density>, <Density Scale Factor (optional)> ]
Hyperbola.Syntax=[ <Focal Point>, <Focal Point>, <Semimajor Axis Length> ]\n[ <Focal Point>, <Focal Point>, <Segment> ]\n[ <Point>, <Point>, <Point> ]
Icosahedron.Syntax=[ <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
Intersect.Syntax=[ <Object>, <Object> ]\n[ <Object>, <Object>, <Index of Intersection Point> ]\n[ <Object>, <Object>, <Initial Point> ]\n[ <Function>, <Function>, <Start x-Value>, <End x-Value> ]
IntersectPath=IntersectPaths
IntersectPath.Syntax=[ <Line>, <Polygon> ]\n[ <Line>, <Conic> ]
IntersectPath.Syntax3D=[ <Line>, <Polygon> ]\n[ <Line>, <Conic> ]\n[ <Plane>, <Polygon> ]\n[ <Plane>, <Quadric> ]
InversePascal.Syntax=[ <Number of Successes>, <Probability of Success>, <Probability> ]
Iteration.Syntax=[ <Function>, <Start Value>, <Number of Iterations> ]
IterationList.Syntax=[ <Function>, <Start Value>, <Number of Iterations> ]
Length.Syntax=[ <Vector> ]\n[ <Point> ]\n[ <List> ]\n[ <Text> ]\n[ <Locus> ]\n[ <Segment> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]\n[ <Function>, <Start Point>, <End Point> ]\n[ <Curve>, <Start t-Value>, <End t-Value> ]\n[ <Curve>, <Start Point>, <End Point> ]
Length.SyntaxCAS=[ <Function>, <x-start>, <x-end> ]\n[ <Function>, <Variable>, <Start Point>, <End Point> ]
LocusEquation.Syntax=[ <Locus> ]\n[ <Locus Point>, <Moving Point> ]
LogNormal.Syntax=[ <Mean>, <Standard Deviation>, <Variable Value> ]\n[ <Mean>, <Standard Deviation>, x, <Boolean Cumulative> ]
Logistic.Syntax=[ <Mean>, <Scale>, <Variable Value> ]\n[ <Mean>, <Scale>, x, <Boolean Cumulative> ]
Max.Syntax=[ <Interval> ]\n[ <List> ]\n[ <Number>, <Number> ]\n[ <List of Data>, <List of Frequencies> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
Maximize.Syntax=[ <Dependent Number>, <Free Number> ]
Min.Syntax=[ <Interval> ]\n[ <List> ]\n[ <Number>, <Number> ]\n[ <List of Data>, <List of Frequencies> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
Minimize.Syntax=[ <Dependent Number>, <Free Number> ]
NSolve.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <Variable> ]\n[ <Equation>, <Variable = starting value> ]\n[ <List of Equations>, <List of Variables)> ]
Numerator.Syntax=[ <Function> ]
Numeric.SyntaxCAS=[ <Expression> ]\n[ <Expression>, <significant figures> ]
Octahedron.Syntax=[ <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
OrthogonalLine.Syntax3D=[ <Point>, <Line> ]\n[ <Point>, <Segment> ]\n[ <Point>, <Vector> ]\n[ <Point>, <Plane> ]\n[ <Line>, <Line> ]\n[ <Point>, <Line>, <Line> ]\n[ <Point>, <Vector>, <Vector> ]\n[ <Point>, <Line>, <Context> ]
OsculatingCircle.Syntax=[ <Point>, <Function> ]\n[ <Point>, <Curve> ]
PMCC.Syntax=[ <List of Points> ]\n[ <List of x-Coordinates>, <List of y-Coordinates> ]
Pascal.Syntax=[ <Number of Successes>, <Probability of Success> ]\n[ <Number of Successes>, <Probability of Success>, <Boolean Cumulative> ]\n[ <Number of Successes>, <Probability of Success>, <Variable Value>, <Boolean Cumulative> ]
Pascal.SyntaxCAS=[ <Number of Successes>, <Probability of Success>, <Variable Value>, <Boolean Cumulative> ]
Plane.Syntax=[ <Point>, <Plane> ]\n[ <Point>, <Line> ]\n[ <Point>, <Point>, <Point> ]
Point.Syntax=[ <Object> ]\n[ <List> ]\n[ <Object>, <Parameter> ]\n[ <Point>, <Vector> ]
Polar.Syntax=[ <Point>, <Conic> ]
PolyLine=PolyLine
Product.Syntax=[ <List of Raw Data> ]\n[ <List of Numbers>, <List of Frequencies> ]
Q1=Q1
Q3=Q3
RandomUniform.Syntax=[ <Min>, <Max> ]
Relation.Syntax=[ <Object>, <Object> ]
Sequence.Syntax=[ <End Value> ]\n[ <Expression>, <Variable>, <Start Value>, <End Value> ]\n[ <Expression>, <Variable>, <Start Value>, <End Value>, <Increment> ]
SetActiveView.Syntax=[ <View Number 1|2> ]
SetBackgroundColor.Syntax=[ <Object>, "<Color>" ]\n[ <Object>, <Red>, <Green>, <Blue> ]
SetCoords.Syntax=[ <Point>, <x>, <y> ]
SetFixed.Syntax=[ <Object>, <true | false> ]
SetPointSize.Syntax=[ <Point>, <Number> ]
SetViewDirection.Syntax=[ <Direction> ]
ShowAxes.Syntax=[ ]\n[ <Boolean> ]\n[ <View>, <Boolean> ]
ShowGrid.Syntax=[ ]\n[ <Boolean> ]\n[ <View>, <Boolean> ]
SigmaXY.Syntax=[ <List of Points> ]\n[ <List of x-Coordinates>, <List of y-Coordinates> ]
SlowPlot.Syntax=[ <Function> ]
Solve.SyntaxCAS=[ <Equation in x> ]\n[ <Equation>, <Variable> ]\n[ <List of Equations>, <List of Variables> ]
SolveODE.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <Point(s) on f> ]\n[ <Equation>, <Point(s) on f>, <Point(s) on f'> ]\n[ <Equation>, <Dependent Variable>, <Independent Variable>, <Point(s) on f> ]\n[ <Equation>, <Dependent Variable>, <Independent Variable>, <Point(s) on f>, <Point(s) on f'> ]
Sphere.Syntax=[ <Point>, <Radius Number> ]
Spline.Syntax=[ <List of Points> ]\n[ <List of Points>, <Order \u2265 3> ]
StepGraph.Syntax=[ <List of Points> ]\n[ <List of Points>, <Boolean Join> ]\n[ <List of x-coordinates>, <List of y-coordinates> ]\n[ <List of Points>, <Boolean Join>, <Point style> ]\n[ <List of x-coordinates>, <List of y-coordinates>, <Boolean Join> ]\n[ <List of x-coordinates>, <List of y-coordinates>, <Boolean Join>, <Point style> ]
Sum.Syntax=[ <List> ]\n[ <List>, <Number of Elements> ]\n[ <List>, <List of Frequencies> ]
Sum.SyntaxCAS=[ <List> ]\n[ <expression>, <variable>, <start value>, <end value> ]
Surface.Syntax=[ <Expression>, <Expression>, <Expression>, <Parameter Variable 1>, <Start Value>, <End Value>, <Parameter Variable 2>, <Start Value>, <End Value> ]
TDistribution.Syntax=[ <Degrees of Freedom>, <Variable Value> ]\n[ <Degrees of Freedom>, x, <Boolean Cumulative> ]
Take.Syntax=[ <List>, <Start Position> ]\n[ <Text>, <Start Position> ]\n[ <List>, <Start Position>, <End Position> ]\n[ <Text>, <Start Position>, <End Position> ]
Take.SyntaxCAS=[ <List>, <Start Position>, <End Position> ]
Tangent.Syntax=[ <Point>, <Conic> ]\n[ <Point>, <Function> ]\n[ <Point on Curve>, <Curve> ]\n[ <x-Value>, <Function> ]\n[ <Line>, <Conic> ]\n[ <Circle>, <Circle> ]
TaylorSeries.SyntaxCAS=[ <Expression>, <x-Value>, <Order Number> ]\n[ <Expression>, <Variable>, <Variable-Value>, <Order Number> ]
Tetrahedron.Syntax=[ <Point>, <Point> ]\n[ <Point>, <Point>, <Direction> ]
ToolImage.Syntax=[ <Number> ]
Triangular.Syntax=[ <Lower Bound>, <Upper Bound>, <Mode>, <Variable Value> ]\n[ <Lower Bound>, <Upper Bound>, <Mode>, x, <Boolean Cumulative> ]
Turtle.Syntax=[ ]
Uniform.Syntax=[ <Lower Bound>, <Upper Bound>, <Variable Value> ]\n[ <Lower Bound>, <Upper Bound>, x, <Boolean Cumulative> ]
Vertex.Syntax=[ <Conic> ]\n[ <Inequality> ]\n[ <Polygon> ]\n[ <Polygon>, <Index> ]
Volume.Syntax=[ <Object> ]
Weibull.Syntax=[ <Shape>, <Scale>, <Variable Value> ]\n[ <Shape>, <Scale>, x, <Boolean Cumulative> ]
ZProportion2Test.Syntax=[ <Sample Proportion 1>, <Sample Size 1>, <Sample Proportion 2>, <Sample Size 2>, <Tail> ]