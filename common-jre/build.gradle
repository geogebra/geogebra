plugins {
    id 'com.github.spotbugs' version '1.6.9'
}

description 'Common parts of GeoGebra that depends on JRE support.'

apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
	compile project(':common')
	compile project(':giac-jni')
	compile project(':editor-base')
	testCompile project(':ggbjdk')

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.7.22'
}

sourceSets {
    nonfree
    main {
        resources {
            if (!project.hasProperty("usegpl")) {
                srcDirs += nonfree.resources.srcDirs
            }
        }
    }
}

if(hasProperty("eclipse")){
    eclipse.classpath.sourceSets.removeAll { it.name == 'nonfree' || it.name == 'gpl'}
}

spotbugs {
     ignoreFailures = true
     excludeFilter = file("config/findbugs.xml")
}

pmd {
     ignoreFailures = true
     ruleSets = []
     ruleSetFiles = files("config/pmd.xml")
}
test {
	ignoreFailures = true
}

checkstyle {
    toolVersion = "8.8"
}

// http://stackoverflow.com/questions/20638039/gradle-and-jacoco-instrument-classes-from-a-separate-subproject
gradle.projectsEvaluated {
    // include src from all dependent projects (compile dependency) in JaCoCo test report
    jacocoTestReport {
        // get all projects we have a (compile) dependency on
        def projs = configurations.compile.getAllDependencies().withType(ProjectDependency).collect{it.getDependencyProject()}
        projs.each {
            additionalSourceDirs files(it.sourceSets.main.java.srcDirs)
            additionalClassDirs files(files(it.sourceSets.main['java'].outputDir).collect({
                File f -> fileTree(dir: f, exclude: ['org/apache/**','edu/**','org/geogebra/common/kernel/barycentric/**'])
            }))
        }
    }
}

jacocoTestReport {
   afterEvaluate {
        setClassDirectories files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['org/mozilla/**'])
        })
    }
    reports {
        xml.enabled true
        html.enabled false
    }
}
