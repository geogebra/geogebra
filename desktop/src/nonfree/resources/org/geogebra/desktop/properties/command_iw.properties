# Copyright (c) GeoGebra Group, office@geogebra.org
# The GeoGebra language files are licensed to you under the terms of the
# Creative Commons Attribution-NonCommercial-ShareAlike licence (version 3.0 or later),
# the current text of which can be found via this link:
# http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode.
# Attribution (as required by that Creative Commons license) should take the form of
# (at least) a mention of our name, an appropriate copyright notice and a link to our
# website located at http://www.geogebra.org.
# For further details, please see http://www.geogebra.org/license
BarCode.Syntax=[ ]\n[ <Image> ]\n[ <Text or Number>, "<Format (optional)>", "<Error Correction (optional)>", <Width (optional)>, <Height (optional)> ]
Circle.Syntax3D=[ <Point>, <Radius Number> ]\n[ <Point>, <Segment> ]\n[ <Point>, <Point> ]\n[ <Line>, <Point> ]\n[ <Point>, <Point>, <Point> ]\n[ <Point>, <Radius>, <Direction> ]\n[ <Point>, <Point>, <Direction> ]
Command=\u05e4\u05e7\u05d5\u05d3\u05d4
ContingencyTable.Syntax=[ <List of Text>, <List of Text> ]\n[ <List of Text>, <List of Text>, <Options> ]\n[ <List of Row Values>, <List of Column Values>, <Frequency Table> ]\n[ <List of Row Values>, <List of Column Values>, <Frequency Table>, <Options> ]
DotPlot.Syntax=[ <List of Raw Data>, <Stack Adjacent Dots (optional)>, <Scale Factor (optional)> ]
DynamicCoordinates.Syntax=[ <Point>, <Number>, <Number> ]
Execute.Syntax=[ <List of Texts> ]\n[ <List of Texts>, <Parameter>, <Parameter>, ... ]
Function.Syntax=[ <List of Numbers> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
GetTime.Syntax=[ ]\n[ "<Format>" ]
HistogramRight.Syntax=[ <List of Class Boundaries>, <List of Heights> ]\n[ <List of Class Boundaries>, <List of Raw Data>, <Use Density>, <Density Scale Factor (optional)> ]\n[ <Boolean Cumulative>, <List of Class Boundaries>, <List of Raw Data>, <Use Density>, <Density Scale Factor (optional)> ]
ImplicitCurve.Syntax=[ <List of Points> ]\n[ <f(x\u201a y)> ]
ImplicitDerivative.Syntax=[ <f(x\u201a y)> ]
ImplicitDerivative.SyntaxCAS=[ <f(x\u201a y)> ]\n[ <Expression>, <Dependent Variable>, <Independent Variable> ]
IntersectPath=IntersectPaths
Locus.Syntax=[ <Point Creating Locus Line>, <Point> ]\n[ <Point Creating Locus Line>, <Slider> ]\n[ <Slopefield>, <Point> ]\n[ <f(x\u201a y)>, <Point> ]
LocusEquation.Syntax=[ <Locus> ]\n[ <Locus Point>, <Moving Point> ]\n[ <Boolean Expression>, <Free Point> ]
Max.Syntax=[ <Interval> ]\n[ <List> ]\n[ <Number>, <Number> ]\n[ <List of Data>, <List of Frequencies> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
Min.Syntax=[ <Interval> ]\n[ <List> ]\n[ <Number>, <Number> ]\n[ <List of Data>, <List of Frequencies> ]\n[ <Function>, <Start x-Value>, <End x-Value> ]
NSolve.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <Variable> ]\n[ <Equation>, <Variable = starting value> ]\n[ <List of Equations>, <List of Variables)> ]
Numeric.SyntaxCAS=[ <Expression> ]\n[ <Expression>, <significant figures> ]
OrthogonalLine.Syntax3D=[ <Point>, <Line> ]\n[ <Point>, <Segment> ]\n[ <Point>, <Vector> ]\n[ <Point>, <Plane> ]\n[ <Line>, <Line> ]\n[ <Point>, <Line>, <Line> ]\n[ <Point>, <Vector>, <Vector> ]\n[ <Point>, <Line>, <Context> ]
PMCC.Syntax=[ <List of Points> ]\n[ <List of x-Coordinates>, <List of y-Coordinates> ]
Plane.Syntax=[ <Polygon> ]\n[ <Conic> ]\n[ <Point>, <Plane> ]\n[ <Point>, <Line> ]\n[ <Line>, <Line> ]\n[ <Point>, <Point>, <Point> ]
Point.Syntax=[ <Object> ]\n[ <List> ]\n[ <Object>, <Parameter> ]\n[ <Point>, <Vector> ]
PolyLine=PolyLine
Product.SyntaxCAS=[ <List of expressions> ]\n[ <Expression>, <variable>, <start index>, <end index> ]
Sequence.Syntax=[ <End Value> ]\n[ <Expression>, <Variable>, <Start Value>, <End Value> ]\n[ <Expression>, <Variable>, <Start Value>, <End Value>, <Increment> ]
SetBackgroundColor.Syntax=[ <Object>, "<Color>" ]\n[ <Object>, <Red>, <Green>, <Blue> ]
SetCoords.Syntax=[ <Object>, <x>, <y> ]
SetFixed.Syntax=[ <Object>, <true | false> ]
SetViewDirection.Syntax=[ <Direction> ]
ShowAxes.Syntax=[ ]\n[ <Boolean> ]\n[ <View>, <Boolean> ]
ShowGrid.Syntax=[ ]\n[ <Boolean> ]\n[ <View>, <Boolean> ]
SigmaXY.Syntax=[ <List of Points> ]\n[ <List of x-Coordinates>, <List of y-Coordinates> ]
SlopeField.Syntax=[ <f(x\u201a y)> ]\n[ <f(x\u201a y)>, <Number n> ]\n[ <f(x\u201a y)>, <Number n>, <Length Multiplier a> ]\n[ <f(x\u201a y)>, <Number n>, <Length Multiplier a>, <Min x>, <Min y>, <Max x>, <Max y> ]
SolveODE.Syntax=[ <f\u2032(x\u201a y)> ]\n[ <f\u2032(x\u201a y)>, <Point on f> ]\n[ <f\u2032(x\u201a y)>, <Start x>, <Start y>, <End x>, <Step> ]\n[ <y\u2032>, <x\u2032>, <Start x>, <Start y>, <End t>, <Step> ]\n[ <b(x)>, <c(x)>, <f(x)>, <Start x>, <Start y>, <Start y\u2032>, <End x>, <Step> ]
SolveODE.SyntaxCAS=[ <Equation> ]\n[ <Equation>, <Dependent Variable>, <Independent Variable> ]
Spline.Syntax=[ <List of Points> ]\n[ <List of Points>, <Order \u2265 3> ]
StartLogging.Syntax=[ "<Sensor>", <Variable>, "<Sensor>", <Variable>, ... ]
StepGraph.Syntax=[ <List of Points> ]\n[ <List of Points>, <Boolean Join> ]\n[ <List of x-coordinates>, <List of y-coordinates> ]\n[ <List of Points>, <Boolean Join>, <Point style> ]\n[ <List of x-coordinates>, <List of y-coordinates>, <Boolean Join> ]\n[ <List of x-coordinates>, <List of y-coordinates>, <Boolean Join>, <Point style> ]
StopLogging.Syntax=[ ]
Sum.SyntaxCAS=[ <List> ]\n[ <expression>, <variable>, <start value>, <end value> ]
Surface.Syntax=[ <Function>, <Angle> ]\n[ <Expression>, <Expression>, <Expression>, <Parameter Variable 1>, <Start Value>, <End Value>, <Parameter Variable 2>, <Start Value>, <End Value> ]
Take.Syntax=[ <List>, <Start Position> ]\n[ <Text>, <Start Position> ]\n[ <List>, <Start Position>, <End Position> ]\n[ <Text>, <Start Position>, <End Position> ]
TaylorSeries.SyntaxCAS=[ <Expression>, <x-Value>, <Order Number> ]\n[ <Expression>, <Variable>, <Variable-Value>, <Order Number> ]
Turtle.Syntax=[ ]
Vertex.Syntax=[ <Conic> ]\n[ <Inequality> ]\n[ <Polygon> ]\n[ <Polygon>, <Index> ]
Volume.Syntax=[ <Object> ]
ZProportion2Test.Syntax=[ <Sample Proportion 1>, <Sample Size 1>, <Sample Proportion 2>, <Sample Size 2>, <Tail> ]