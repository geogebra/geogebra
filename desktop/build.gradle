plugins {
    id 'com.github.spotbugs' version '1.6.9'
}

project.setDescription('Parts of GeoGebra related to desktop platforms')

apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'

sourceSets {
    nonfree
    gpl
    main {
        resources {
            if (project.hasProperty("usegpl")) {
                srcDirs += gpl.resources.srcDirs
            } else {
                srcDirs += nonfree.resources.srcDirs
            }
        }
    }
}

eclipse.classpath.sourceSets.removeAll { it.name == 'nonfree' || it.name == 'gpl'}
eclipse.classpath.file {
	// Eclipse dependecies are based on projects, not source paths
	whenMerged { classpath ->
		classpath.entries.removeAll { entry ->
			entry.kind == 'lib' && entry.path.matches(".*common-jre/build/.*/test") 
		}
	}
}

File javaHome = new File(System.properties['java.home'])
javaHome = javaHome.name == 'jre' ? javaHome.parentFile : javaHome
String jfxrtLocation = new File("${javaHome}/jre/lib/jfxrt.jar").absolutePath
// JavaFX locations for JDK7, JDK7, JDK8
for (location in ['lib/jfxrt.jar', 'jre/lib/jfxrt.jar', 'jre/lib/ext/jfxrt.jar']) {
    File file = new File(javaHome, location)
    if (file.exists()) {
        jfxrtLocation = file.absolutePath
        break
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

List ext = [
    'netscape.javascript:jsobject:1', 
    'com.apple:mac_extensions:20040714', 
    'com.ogprover:OpenGeoProver:20120725',
    'com.sun:jna:4.1.0']


dependencies {
    compile project(':common')
    compile project(':common-jre')
    compile project(':editor-desktop')
    compile project(':jogl2')
    compile project(':input3D:impl')
    compile project(':giac-jni')
    compile ext, files(jfxrtLocation)

    runtime "com.jogamp:jogl-all:$joglVersion:natives-linux-amd64",
        "com.jogamp:jogl-all:$joglVersion:natives-windows-i586",
        "com.jogamp:jogl-all:$joglVersion:natives-windows-amd64",
        "com.jogamp:jogl-all:$joglVersion:natives-macosx-universal",
        "com.jogamp:jogl-all:$joglVersion:natives-linux-i586"
    runtime "com.jogamp:gluegen-rt:$joglVersion:natives-linux-amd64",
        "com.jogamp:gluegen-rt:$joglVersion:natives-windows-i586",
        "com.jogamp:gluegen-rt:$joglVersion:natives-windows-amd64", 
        "com.jogamp:gluegen-rt:$joglVersion:natives-macosx-universal",
        "com.jogamp:gluegen-rt:$joglVersion:natives-linux-i586"
    runtime "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-linux-amd64",
        "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-linux-i586",
        "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-windows-amd64", // 201503271100 should have been used (for some strange reason versions cannot be mixed)
        "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-windows-i586",
        "fr.ujf-grenoble:javagiac:$javaGiacVersion:natives-macosx-universal"

    testCompile project(':keyboard-base')
    testCompile 'junit:junit:4.+'
    testCompile project(':ggbjdk')
    testCompile project(':common-jre').sourceSets.test.output
}

mainClassName = "org.geogebra.desktop.GeoGebra3D"

run {
    // Copying JOGL related native JARs into the same directory where the non-native JAR takes place.
    // JOGL is simply dumb, it cannot work neither with java.library.path nor classpath or anything. Arrgh. 
    def gluegen = project.configurations.compile.find { it.name == "gluegen-rt-${joglVersion}.jar" }
    def gluegen_natives = project.configurations.runtime.findAll { it.name.startsWith("gluegen-rt-$joglVersion-natives") }
    def gluegen_dir = gluegen.getParent()
    for (i in gluegen_natives) {
        def gluegen_native_path = i.getPath()
        ant.copy(file:"$gluegen_native_path", todir:"$gluegen_dir")
    }
    def jogl = project.configurations.compile.find { it.name == "jogl-all-${joglVersion}.jar" }
    def jogl_natives = project.configurations.runtime.findAll { it.name.startsWith("jogl-all-$joglVersion-natives") }
    def jogl_dir = jogl.getParent()
    for (i in jogl_natives) {
        def jogl_native_path = i.getPath()
        ant.copy(file:"$jogl_native_path", todir:"$jogl_dir")
    }

}
test {
    Properties properties = new Properties()
    if (project.hasProperty("authProperties")) {
        File propertiesFile = new File(project.getProperty("authProperties"))
        propertiesFile.withInputStream {
            properties.load(it)
        }
        properties.each { prop, val->
            systemProperty prop.trim(), val;
        }
    }

    systemProperty "ggb.prerelease", project.findProperty("prerelease") ?: "true";

    ignoreFailures = true
    outputs.upToDateWhen { false }
}
spotbugs {
     ignoreFailures = true
     excludeFilter = file("config/findbugs.xml")
}

import org.gradle.plugins.ide.eclipse.model.AccessRule
eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('accessible', 'com/**'))
                jre.accessRules.add(new AccessRule('accessible', 'javafx/**'))
            }
        }
    }
}
checkstyle {
    configDir = file("config/checkstyle/")
    toolVersion = "8.8"
}
