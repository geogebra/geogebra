// Authors: Balazs Bencze <balazs.bencze@geogebra.org>,
// and Zoltan Kovacs <zoltan@geogebra.org>.
// Based on Bernard Parisse's original Makefiles and other scripts.

project.setDescription('Giac CAS for GeoGebra')

apply from: '../gradle-scripts/repositories.gradle'
apply from: '../gradle-scripts/versions.gradle'

apply plugin: 'cpp'
apply plugin: 'visual-studio'

/* Emscripten related settings. Currently we use version 1.37.22 to produce the WASM build and 1.34.1 for
 * the normal JavaScript version, other versions may not work correctly,
 * or may have problems in some Giac commands and results. By default, 1.34.1 will be used.
 *
 * 1. You will need to download the correct toolchain version by running the tasks downloadEmsdk,
 *    then set EMSCRIPTEN_VERSION=tag-1.34.1 or tag-1.37.22, and run the task installEmsdk.
 *    (Always take care of using the correct emscripten version and also the appropriate clang compiler,
 *    otherwise you may encounter extremely strange problems on compilation time or runtime.
 *    Newer emscripten versions usually do sanity checks during the compilation and inform you
 *    about any issues.) This step may take a while since clang may be recompiled from source.
 *    (You may need additional tools to compile it including cmake.)
 *
 * 2. Hopefully you have the correct versions of GMP and MPFR in src/giac.js/prebuilt/. If not, you
 *    need to compile the correct version. The provided tasks may compile an incorrect version for
 *    1.34.1, but it should work for the older ones. The related tasks are: emConfigureGmp,
 *    emMakeGmp, emConfigureMpfr, emMakeMpfr. (The correct GMP and MPFR versions can be tested
 *    by entering some big integer/real computations.) First you may need to set some environmental
 *    variables or hardcoded script variables manually. FIXME
 *    The compilation can be influenced by using the environmental variable EXT_GMPMPFR (local/emgiac).
 *    Luckily, the current prebuilt files should work properly with 1.34.1 and 1.37.22 as well.
 *
 * 3. Run the createGiacJs task. It will recompile all C++ files and then re-link the library.
 *    It can be fine-tuned by using the EMSCRIPTEN_VER and EMSCRIPTEN_VERSION environmental variables
 *    (but usually not required to use them). Additionally, you may want to set the WASM=1 option
 *    to have the WebAssembly version. Note that you need to create the asm.js (WASM unset) version and
 *    the WebAssembly version (WASM=1) on different runs, so it may be reasonable to store two
 *    copies of this folder. That, is you usually need one of the following command lines:
 *
 *    $ EMSCRIPTEN_VER=201503 EMSCRIPTEN_VERSION=tag-1.34.1 ../gradlew clean activateEmsdk createGiacJs
 *
 *    or
 *
 *    $ EMSCRIPTEN_VER=201704 EMSCRIPTEN_VERSION=tag-1.37.22 WASM=1 ../gradlew clean activateEmsdk createGiacJs
 *
 *    These command lines will work only after you already ran downloadEmsdk and installEmsdk
 *    (as described above).
 */

// FIXME: Some of these settings are hardcoded at the moment, they need to be more general.
def externalSourceDir = "/home/autotest/gmp+mpfr-llvm"
// You may need to download and unzip following packages:
def gmpSourceDir = "$externalSourceDir/gmp-6.0.0"
def mpfrSourceDir = "$externalSourceDir/mpfr-3.1.2"
def emgiacSourceDir = "$externalSourceDir/emgiac"

def jsPrebuiltDir = "src/giac.js/prebuilt"
def LlvmMpfrA = "$jsPrebuiltDir/libmpfr.a"
def LlvmGmpA = "$jsPrebuiltDir/libgmp.a"
if (System.env['EXT_GMPMPFR'] != null && System.env['EXT_GMPMPFR'] == "local") {
    LlvmMpfrA = "$mpfrSourceDir/src/.libs/libmpfr.a"
    LlvmGmpA = "$gmpSourceDir/.libs/libgmp.a"
}
if (System.env['EXT_GMPMPFR'] != null && System.env['EXT_GMPMPFR'] == "emgiac") {
    LlvmMpfrA = "$emgiacSourceDir/giac/libmpfr.a"
    LlvmGmpA = "$emgiacSourceDir/giac/libgmp.a"
}
def emscriptenVer = ['201503', '201704'] // 1.37.22
if (System.env['EMSCRIPTEN_VER'] != null) {
    emscriptenVer[0] = System.env['EMSCRIPTEN_VER'];
}



def emsdkUrlFolder = 'https://s3.amazonaws.com/mozilla-games/emscripten/releases'
def emsdkTgzFile = 'emsdk-portable.tar.gz'
def emsdkDir = file('emsdk')
def emsdkRunDir = file("$emsdkDir/emsdk-portable")
def emscriptenVersion = ["tag-1.34.1", "tag-1.37.22"]
if (System.env['EMSCRIPTEN_VERSION'] != null) {
    emscriptenVersion[0] = System.env['EMSCRIPTEN_VERSION'];
}
def emscriptenDir = emscriptenVersion.collect({version -> file("$emsdkRunDir/emscripten/$version")})

def emccCommand = emscriptenDir.collect({dir -> "${dir}/emcc"})

// End of emscripten related settings. Huh.

def java_home = org.gradle.internal.jvm.Jvm.current().javaHome
def giacVersion = '"1.2.3-' + javaGiacVersion + '"'

import org.apache.tools.ant.taskdefs.condition.Os

def exec_(String... script) {
    if (!Os.isFamily(Os.FAMILY_MAC)) {
        return ""
    }
    def retVal
    exec {
        commandLine script
        standardOutput = new ByteArrayOutputStream()
        retVal = {
            standardOutput.toString().trim()
        }
    }
    return retVal()
}

def gccBin = exec_("xcrun", "--sdk", "macosx", "--find", "gcc")
def gccPath = "/usr/bin"
if (gccBin.length() > 0) {
    gccPath = gccBin.substring(0, gccBin.lastIndexOf("/"))
}
def clangBin = exec_("xcrun", "--sdk", "iphoneos", "--find", "clang")
def clangPath = "/usr/bin"
if (clangBin.length() > 0) {
    clangPath = clangBin.substring(0, clangBin.lastIndexOf("/"))
}
def iphoneosSdk = exec_("xcrun", "--sdk", "iphoneos", "--show-sdk-path")
def iphonesimulatorSdk = exec_("xcrun", "--sdk", "iphonesimulator", "--show-sdk-path")
def iphoneosPlatform = exec_("xcrun", "--sdk", "iphoneos", "--show-sdk-platform-path")
def minIosVersion = '9.0'

def iosClangCompilerArgs(args, sdk, arch, minIosVersion) {
    for (int i = args.size() - 1; i >= 0; i--) { 
        if (args[i].equals("-nostdinc")) { 
 	    args.remove(i); 
        } 
    } 
    args << "-isysroot"
    args << "${sdk}"
    args << "-arch"
    args << "${arch}"
    args << "-miphoneos-version-min=${minIosVersion}"
    args << "-std=gnu++98"
    args << "-stdlib=libc++"
    args << "-fembed-bitcode"
    args << "-O0"
}

def giacCommonDefines(cppCompiler) {
    cppCompiler.define "GIAC_GGB"
    cppCompiler.define "IN_GIAC"
    cppCompiler.define "GIAC_GENERIC_CONSTANTS"
    cppCompiler.define "HAVE_UNISTD_H"
    cppCompiler.define "HAVE_LIBPTHREAD"
    cppCompiler.define "HAVE_SYSCONF"
    cppCompiler.define "HAVE_NO_HOME_DIRECTORY"
    // cppCompiler.define "VERSION", giacVersion
    cppCompiler.define "VERSION", '"dummy"' // will be overwritten later, see below
    cppCompiler.define "TIMEOUT"
    cppCompiler.define 'HAVE_SYS_TIMES_H'
    cppCompiler.define 'HAVE_SYS_TIME_H'
}

def giacIosDefines(cppCompiler) {
    cppCompiler.define 'APPLE_SMART'
    cppCompiler.define 'NO_GETTEXT'
    cppCompiler.define 'NO_SCANDIR'
    cppCompiler.define 'OSX_10_9_CXX'
    cppCompiler.define 'HAVE_CONFIG_H'
    cppCompiler.define '_IOS_FIX_'
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            mpfr {
                binaries.withType(StaticLibraryBinary) {
                    def arch = targetPlatform.architecture.name
                    def os = targetPlatform.operatingSystem.name
                    staticLibraryFile = file("src/jni/prebuilt/$os/$arch/libmpfr.a")
                }
            }
            gmp {
                binaries.withType(StaticLibraryBinary) {
                    def arch = targetPlatform.architecture.name
                    def os = targetPlatform.operatingSystem.name
                    staticLibraryFile = file("src/jni/prebuilt/$os/$arch/libgmp.a")
                }
            }
        }
    }

    platforms {
        win32 {
            architecture 'i386'
            operatingSystem 'windows'
        }
        win64 {
            architecture 'x64'
            operatingSystem 'windows'
        }
        linux32 { // this will be fixed in Gradle 2.4 (-> linux32)
            architecture 'i386'
            operatingSystem 'linux'
        }
        linux64 {
            architecture 'x64'
            operatingSystem 'linux'
        }
        osx_amd64 {
            architecture 'amd64'
            operatingSystem 'osx'
        }
        androideabi {
            architecture 'arm'
            operatingSystem 'android'
        }
        androidx86 {
            architecture 'x86'
            operatingSystem 'android'
        }
        androidx86_64 {
            architecture 'x86_64'
            operatingSystem 'android'
        }
        androidarm64 {
            architecture 'arm64'
            operatingSystem 'android'
        }
        ios_armv7 {
            architecture 'armv7'
            operatingSystem 'ios'
        }
        ios_arm64 {
            architecture 'arm64'
            operatingSystem 'ios'
        }
        ios_i386 {
            architecture 'i386'
            operatingSystem 'ios'
        }
        ios_x86_64 {
            architecture 'x86_64'
            operatingSystem 'ios'
        }
    }

    toolChains {
        mingw(Gcc) {
            target('win32') {
                cppCompiler.executable 'i686-w64-mingw32-g++'
                linker.executable 'i686-w64-mingw32-g++'
            }
            target('win64') {
                cppCompiler.executable 'x86_64-w64-mingw32-g++'
                linker.executable 'x86_64-w64-mingw32-g++'
            }
        }
        clang(Clang) {
            target('osx_amd64') {
                cppCompiler.executable 'clang'
                linker.executable 'gcc'
                path gccPath, clangPath

                cppCompiler.withArguments { args ->
                    // Gradle is including "sensible default" include paths that are based on the host OS that break cross-compilation
                    // The only fix as I see it is to clear out all includes except the ones that point to protos
                    // SEE https://github.com/gradle/gradle-native/issues/614
                    // isystem args also removed, see https://github.com/gradle/gradle-native/issues/583
                    for (int i = args.size() - 1; i >= 0; i--) {
                        if ((args[i].equals("-I") || args[i].equals("-isystem")) && !args[i+1].startsWith("$rootDir")) {
                            args.remove(i + 1);
                            args.remove(i);
                        }
                    }
                    args << '-mmacosx-version-min=10.6'
                    args << "-isysroot"
                    args << '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk'
                    args << '-stdlib=libstdc++'
                    args << '-lstdc++'
                    args << '-I/System/Library/Frameworks/CoreFoundation.framework/Headers'
                    args << '-I'
                    args << file('src/jni/jdkHeaders/darwin').toString()
                    }
            }
            target('ios_armv7') {
                cppCompiler.executable 'clang'
                cppCompiler.withArguments { args ->
                    iosClangCompilerArgs(args, iphoneosSdk, "armv7", minIosVersion)
                }
                path clangPath
            }
            target('ios_arm64') {
                cppCompiler.executable 'clang'
                cppCompiler.withArguments { args ->
                    iosClangCompilerArgs(args, iphoneosSdk, "arm64", minIosVersion)
                }
                path clangPath
            }
            target('ios_i386') {
                cppCompiler.executable 'clang'
                cppCompiler.withArguments { args ->
                    iosClangCompilerArgs(args, iphonesimulatorSdk, "i386", minIosVersion)
                }
                path clangPath
            }
            target('ios_x86_64') {
                cppCompiler.executable 'clang'
                cppCompiler.withArguments { args ->
                    iosClangCompilerArgs(args, iphonesimulatorSdk, "x86_64", minIosVersion)
                }
                path clangPath
            }
        }
        // Note: Make sure manually that these executables are on the PATH.
        android(Gcc) {
            target('androideabi') {
                cppCompiler.executable 'arm-linux-androideabi-g++'
                linker.executable 'arm-linux-androideabi-g++'
            }
            target('androidx86') {
                cppCompiler.executable 'i686-linux-android-g++'
                linker.executable 'i686-linux-android-g++'
            }
            target('androidx86_64') {
                cppCompiler.executable 'x86_64-linux-android-g++'
                linker.executable 'x86_64-linux-android-g++'
            }
            target('androidarm64') {
                cppCompiler.executable 'aarch64-linux-android-g++'
                linker.executable 'aarch64-linux-android-g++'
            }
        }
    }

    components {
        // giac static libary
        giac(NativeLibrarySpec) {
            targetPlatform 'linux32'
            targetPlatform 'linux64'
            targetPlatform 'ios_armv7'
            targetPlatform 'ios_arm64'
            targetPlatform 'ios_i386'
            targetPlatform 'ios_x86_64'

            binaries.all {
                giacCommonDefines(cppCompiler)
                if (targetPlatform.operatingSystem.name == 'ios') {
                    giacIosDefines(cppCompiler)
                    if (targetPlatform.architecture.name == 'arm-v8') {
                        cppCompiler.define 'x86_64'
                    }
                }
            cppCompiler.args '-fpermissive' // needed for recent G++

            }
        }

        simpleInterface(NativeLibrarySpec) {
            targetPlatform 'ios_armv7'
            targetPlatform 'ios_arm64'
            targetPlatform 'ios_i386'
            targetPlatform 'ios_x86_64'

            binaries.all {
                lib library: 'giac', linkage: 'static'
                giacCommonDefines(cppCompiler)
                if (targetPlatform.operatingSystem.name == 'ios') {
                    giacIosDefines(cppCompiler)
                    if (targetPlatform.architecture.name == 'arm-v8') {
                        cppCompiler.define 'x86_64'
                    }
                }
            }
        }

        minigiac(NativeExecutableSpec) {
            targetPlatform 'linux32'
            targetPlatform 'linux64'

            binaries.all {
                lib library: 'giac', linkage: 'static'
                linker.args '-lgmp', '-lmpfr', '-lpthread'
                cppCompiler.define 'GIAC_GGB'
                cppCompiler.define 'IN_GIAC'
                cppCompiler.define 'GIAC_GENERIC_CONSTANTS'
                cppCompiler.define 'HAVE_CONFIG_H'
                cppCompiler.define 'HAVE_UNISTD_H'
                cppCompiler.define 'HAVE_SYS_TIMES_H'
                cppCompiler.define 'HAVE_SYS_TIME_H'
                cppCompiler.define 'VERSION', giacVersion
                cppCompiler.args '-fpermissive' // needed for recent G++
            }
            sources.all {
                source {
                    srcDirs 'src/giac/cpp', 'src/minigiac/cpp'
                }
            }
        }

        javagiac(NativeLibrarySpec) {
            targetPlatform 'win32'
            targetPlatform 'win64'
            targetPlatform 'linux32' // this will be fixed in Gradle 2.4 (-> linux32)
            targetPlatform 'linux64'
            if (Os.isFamily(Os.FAMILY_MAC)) {
                targetPlatform 'osx_amd64'
            }
            targetPlatform 'androideabi'
            targetPlatform 'androidx86'
            targetPlatform 'androidx86_64'
            targetPlatform 'androidarm64'

            sources.cpp {
                source {
                    srcDirs 'src/giac/cpp', 'src/jni/cpp'
                }
                exportedHeaders {
                    srcDirs 'src/giac/headers', 'src/jni/jdkHeaders'
                }
                lib library: 'mpfr', linkage: 'static'
                lib library: 'gmp', linkage: 'static'
            }

            binaries.withType(SharedLibraryBinarySpec) {
                // Common settings for all platforms and architectures:
                cppCompiler.define 'IN_GIAC'
                cppCompiler.define 'GIAC_GENERIC_CONSTANTS'
                // Additional settings can be defined in config.h.
                // They are automatically loaded if HAVE_CONFIG_H is defined below:
                cppCompiler.define 'HAVE_CONFIG_H'
                cppCompiler.define 'GIAC_GGB'

                cppCompiler.args '-fexceptions'
                // cppCompiler.args '-Os' // size optimization
                cppCompiler.args '-O2' // standard optimization (default)
                cppCompiler.args '-I.'

                linker.args "-I${java_home}/include", "-Isrc/jni/jdkHeaders"

                // Architecture based settings:
                if (targetPlatform.architecture.name == 'i386') {
                    cppCompiler.define 'SMARTPTR64'
                    cppCompiler.define 'SIZEOF_LONG', '8'
                } else {
                    cppCompiler.define 'SIZEOF_LONG', '4'
                }

                // OS based settings:
                if (targetPlatform.operatingSystem.name == 'windows') {
                    cppCompiler.define 'GIAC_MPQS'
                    cppCompiler.define '__MINGW_H'
                    cppCompiler.define 'HAVE_NO_SYS_TIMES_H'
                    cppCompiler.define 'HAVE_NO_SYS_RESOURCE_WAIT_H'
                    cppCompiler.define 'HAVE_NO_PWD_H'
                    cppCompiler.define 'HAVE_NO_CWD'
                    cppCompiler.define 'NO_CLOCK'
                    cppCompiler.define 'usleep',''
                    cppCompiler.define 'YY_NO_UNISTD_H'

                    // if (targetPlatform.architecture.name == 'x86') {
                         // This can be done to reduce size, but not necessary:
                         // cppCompiler.args '-UHAVE_PTHREAD_H'
                         // This may help in allowing some deprecated constructs:
                         // cppCompiler.args '-fpermissive'
                         // }

                    cppCompiler.args '-I', file('src/jni/jdkHeaders/win32').toString()
                    // Insert prebuilt libraries
                    linker.args '-Wl,--add-stdcall-alias'
                    linker.args '-s' // stripping

                    // Add libgcc and libstdc++ statically
                    linker.args '-static-libgcc'
                    linker.args '-static-libstdc++'
                    // Statically link libpthread
                    // linker.args '-Wl,-Bstatic', '-lstdc++', '-lpthread'
                    // Or even better, everything
                    linker.args '-static'
                }

                if (targetPlatform.operatingSystem.name == 'linux') {
                    cppCompiler.define 'HAVE_UNISTD_H'

                    cppCompiler.args '-I', file('src/jni/jdkHeaders/linux').toString()
                    cppCompiler.args '-fno-strict-aliasing' // maybe not needed
                    cppCompiler.args '-DPIC' // maybe not needed

                    linker.args '-s' // stripping

                    // Add libgcc and libstdc++ statically
                    linker.args '-static-libgcc'
                    linker.args '-static-libstdc++'

                }
                if (targetPlatform.operatingSystem.name == 'android') {
                    cppCompiler.define 'HAVE_UNISTD_H'
                    cppCompiler.define 'NO_BSD'

                    cppCompiler.args '-I', file('src/jni/jdkHeaders/linux').toString()
                    // overwrite standard headers with custom android headers
                    cppCompiler.args '-iquote', file('src/giac/headers/android').toString()
                    cppCompiler.args '-fno-strict-aliasing' // maybe not needed
                    cppCompiler.args '-DPIC' // maybe not needed
                    cppCompiler.args '-fPIC' // android 6.0 doesn't load libraries which have text relocations

                    linker.args '-s' // stripping
                }

                if (targetPlatform.operatingSystem.name == 'osx') {

                    cppCompiler.define 'HAVE_UNISTD_H'
                    cppCompiler.define 'APPLE_SMART'
                    cppCompiler.define 'NO_SCANDIR'
                    cppCompiler.define 'HAVE_SYS_TIMES_H'
                    cppCompiler.define 'HAVE_SYS_TIME_H'
                    cppCompiler.define 'gettext', ''

                    linker.args '-Wl,-search_paths_first'
                    linker.args '-L', file('src/jni/prebuilt/osx/x86-64').toString()

                    linker.args '-stdlib=libstdc++', '-lstdc++'
                    linker.args '-lgmp', '-lmpfr', '-lpthread', '-dynamiclib'
                    linker.args '-framework', 'Accelerate'
                    linker.args '-framework', 'CoreFoundation'
                    def path = 'build/binaries/javagiacSharedLibrary/osx_amd64/'
                    mkdir(path)
                    linker.args '-o', "$path/libjavagiac.jnilib" // TODO: find a more elegant way
                }
            }
        }
    }
}

def lipoOutput(name, output) {
    def path = "build/libs/${name}/static"
    mkdir("${output}")
    exec_("lipo", 
        "${path}/ios_armv7/lib${name}.a", 
        "${path}/ios_arm64/lib${name}.a", 
        "${path}/ios_i386/lib${name}.a",
        "${path}/ios_x86_64/lib${name}.a",
        '-create', '-output', "${output}/lib${name}.a")
}

def lipoPrebuilt(name, output) {
    def path = "src/jni/prebuilt/ios"
    mkdir("${output}")
    exec_("lipo", 
        "${path}/armv7/lib${name}.a", 
        "${path}/arm64/lib${name}.a", 
        "${path}/i386/lib${name}.a",
        "${path}/x86_64/lib${name}.a",
        '-create', '-output', "${output}/lib${name}.a")
}

task simpleInterfaceIosStaticLibrary(dependsOn: [
    'simpleInterfaceIos_armv7StaticLibrary', 
    'simpleInterfaceIos_arm64StaticLibrary', 
    'simpleInterfaceIos_i386StaticLibrary',
    'simpleInterfaceIos_x86_64StaticLibrary'
])
task giacIosStaticLibrary(dependsOn: [
    'giacIos_armv7StaticLibrary', 
    'giacIos_arm64StaticLibrary', 
    'giacIos_i386StaticLibrary',
    'giacIos_x86_64StaticLibrary'
])

task createFatIosStaticLibrary(dependsOn: ['simpleInterfaceIosStaticLibrary', 'giacIosStaticLibrary']) {
    doLast {
        def output = "build/libs/lipo"
        lipoOutput("simpleInterface", output)
        lipoOutput("giac", output)
        lipoPrebuilt("mpfr", output)
        lipoPrebuilt("gmp", output)
    }
}

task zipIosLibrary(dependsOn: 'createFatIosStaticLibrary', type: Zip) {
    baseName 'Giac'
    from("src/simpleInterface/headers") {
        include "*.hpp"
        into("headers")
    }
    from("${buildDir}/libs/lipo") {
        include "libsimpleInterface.a", "libgiac.a", "libgmp.a", "libmpfr.a"
        into("libs")
    }
    from("src/simpleInterface/pod/Giac.podspec")
    destinationDir = file("${buildDir}/archives/")
}

task installMinigiacExecutable (dependsOn: 'installMinigiacLinux64Executable')

task installNodegiacExecutable (type: Exec) {
    // FIXME: dependencies should be set
    description 'Installs the nodegiac executable.'
    commandLine 'npm', 'install'
}

task testMinigiacExecutable (dependsOn: 'installMinigiacExecutable', type: Exec) {
    description 'Tests the minigiac executable.'
    workingDir 'src/test'
    commandLine './regression', '-r'
}

task testNodegiacExecutable (dependsOn: 'installNodegiacExecutable', type: Exec) {
    description 'Tests the nodegiac executable.'
    workingDir 'src/test'
    commandLine './regression', '-r', '-n'
}

task testExecutables (dependsOn: ['testNodegiacExecutable', 'testMinigiacExecutable'])


task androidCopyEabiLibjavagiacSo (dependsOn: 'javagiacAndroideabiSharedLibrary', type: Copy) {
    description 'Copies libjavagiac.so files to the src/android folder.'
    from 'build/libs/javagiac/shared/androideabi'
    into 'giac-android/src/main/jniLibs/armeabi-v7a'
    include ('libjavagiac.so')
}

task androidCopyX86LibjavagiacSo (dependsOn: 'javagiacAndroidx86SharedLibrary', type: Copy) {
    description 'Copies libjavagiac.so files to the src/android folder.'
    from 'build/libs/javagiac/shared/androidx86'
    into 'giac-android/src/main/jniLibs/x86'
    include ('libjavagiac.so')
}

task androidCopyX86_64LibjavagiacSo (dependsOn: 'javagiacAndroidx86_64SharedLibrary', type: Copy) {
    description 'Copies libjavagiac.so files to the src/android folder.'
    from 'build/libs/javagiac/shared/androidx86_64'
    into 'giac-android/src/main/jniLibs/x86_64'
    include ('libjavagiac.so')
}

task androidCopyArm64LibjavagiacSo (dependsOn: 'javagiacAndroidarm64SharedLibrary', type: Copy) {
    description 'Copies libjavagiac.so files to the src/android folder.'
    from 'build/libs/javagiac/shared/androidarm64'
    into 'giac-android/src/main/jniLibs/arm64-v8a'
    include ('libjavagiac.so')
}


task run (dependsOn: 'installMinigiacExecutable', type: Exec) {
    description "Runs Giac's minigiac terminal"
    commandLine "build/install/minigiac/linux64/minigiac" // FIXME, this is hardcoded
    standardInput = System.in
}

def objDirs = ["build/objs/giac.js", "build/objs/giac-wasm.js"]
def binaryJsDirs = ["build/binaries/giacggb.js", "build/binaries/giacggb.wasm"]

tasks.addRule("Pattern: emccCompileWasm<WASM>_<FILE>Cc: Compile <FILE>.cc into <FILE>.o.") { String taskName ->
    if ((taskName.startsWith('emccCompileWasm')) && (taskName.endsWith('Cc'))) {
        def basename = (taskName - 'Cc').substring('emccCompileWasm1_'.length())
        def wasm = taskName.contains("Wasm1")  ? 1 : 0
        task(taskName) {
            mustRunAfter wasm ? 'activateEmsdkWasm' : 'activateEmsdk'
            def input = "src/giac/cpp/${basename}.cc"
            inputs.file input
            def output = objDirs[wasm] + "/${basename}.o"
            outputs.file output
            doLast {
                file(objDirs[wasm]+"/").mkdirs()
                exec {
                    // Be very careful when changing this: config.h also contains some entries! 
                    def specialOptions = ''
                    def commandline = emccCommand[wasm]
                    commandline += ' -DIN_GIAC -DGIAC_GENERIC_CONSTANTS -DHAVE_CONFIG_H -DNO_STDEXCEPT -fno-exceptions' // from old Makefile
                    commandline += ' -DVERSION=' + giacVersion
                    if (emscriptenVer[wasm] == '201304') {
                        commandline += " -s PRECISE_I32_MUL=1" // from old Makefile (PREC)
                    }
                    if (emscriptenVer[wasm] == '201503') {
                        commandline += " -Dgammaf=tgammaf -s ALLOW_MEMORY_GROWTH=1"
                        commandline += " -s PRECISE_I64_MATH=1 -Oz" // new setting

                    }
                    if (emscriptenVer[wasm] == '201704') {
                        commandline += " -Dgammaf=tgammaf -s ALLOW_MEMORY_GROWTH=1"
                        if (wasm) {
                            commandline += " -s WASM=1 -s NO_EXIT_RUNTIME=1"
                            commandline += " -s BINARYEN_METHOD='native-wasm'" // https://github.com/kripken/emscripten/wiki/WebAssembly
                            commandline += " -s BINARYEN_TRAP_MODE='clamp'"
                        } else {
                            commandline += " -s BINARYEN_METHOD='asmjs'"
                        }

                        commandline += " -s PRECISE_I64_MATH=1 -Oz" // new setting
                        commandline += " -DHAVE_UNISTD_H"
                    }

                    commandline += ' -DGIAC_GGB' // from old Makefile
                    commandline += ' -DTIMEOUT -DEMCC' // from old config.h
                    commandline += " -Isrc/giac/headers -c $input -o $output"
                    println "Compiling: ${commandline}"
                    commandLine commandline.split()
                }
            }
        }
    }
}

task emccClean(type: Delete) {
    description 'Deletes .o files and linked giac*.js for cleaning up.'
    delete objDirs[0], objDirs[1], binaryJsDirs[0], binaryJsDirs[1]
}

[0,1].each({wasm ->
    tasks.create("emccCompileWasm" + wasm) {
        description 'Creates .o files for giac.js.'
        def list = []
        FileTree files = fileTree(dir: 'src/giac/cpp')
        files.visit { f ->
            if (f.name.endsWith('.cc')) {
                def emccCompileTask = 'emccCompileWasm' + wasm + "_" + f.name - '.cc' + 'Cc'
                list << emccCompileTask
            }
        }
        dependsOn list
    }

    tasks.create(name: "emccGiacJsWasm" + wasm, dependsOn: 'emccCompileWasm' + wasm) {
        description 'Links giac.js.'
        mustRunAfter 'emccCompileWasm' + wasm
        def output = binaryJsDirs[wasm] + "/giacggb.js"
        outputs.file output
        doLast {
            def list = []
            def linkerArgs = []
            def inputInclude = []
            FileTree files = fileTree(dir: objDirs[wasm])
            files.visit { f ->
                def emccCompileTask = 'emccCompile_' + f.name - '.o' + 'Cc'
                inputInclude << f.name
                inputInclude << ('src/giac/cpp/' + f.name - '.o' + '.cc')
                list << emccCompileTask
                linkerArgs << objDirs[wasm] + "/${f.name}"
            }

            file(binaryJsDirs[wasm]).mkdirs()
            exec {
                linkerArgs << LlvmMpfrA // mpfr must precede gmp, see http://www.mpfr.org/faq.html, Q5
                linkerArgs << LlvmGmpA
                linkerArgs << '--js-library' << 'src/giac.js/js/time.js'
                if (emscriptenVer[wasm] == '201304') {
                    linkerArgs << '-s' << 'PRECISE_I32_MUL=1'
                }
                if (emscriptenVer[wasm] == '201503') {
                    linkerArgs << '-s' << 'ALLOW_MEMORY_GROWTH=1'
                    linkerArgs << '-s' << 'PRECISE_I64_MATH=1'
                }
                if (emscriptenVer[wasm] == '201704') {
                    linkerArgs << '-s' << 'PRECISE_I64_MATH=1'
                    if (wasm) {
                        linkerArgs << '-s' << 'WASM=1'
                        linkerArgs << '-s' << 'NO_EXIT_RUNTIME=1'
                        linkerArgs << '-s' << "BINARYEN_METHOD='native-wasm'" // https://github.com/kripken/emscripten/wiki/WebAssembly
                        linkerArgs << '-s' << "BINARYEN_TRAP_MODE='clamp'"
                    } else {
                        linkerArgs << '-s' << "BINARYEN_METHOD='asmjs'"
                    }
                    linkerArgs << '-s' << 'ALLOW_MEMORY_GROWTH=1' // maybe gives warnings
                }
                linkerArgs << '-DGIAC_GGB'
                linkerArgs << '-o' << output
                // linkerArgs << "-s" << "DISABLE_EXCEPTION_CATCHING=0"
                linkerArgs << '-Oz' << '-v' << '-s' << "EXPORTED_FUNCTIONS=['_caseval']"
                linkerArgs << '--memory-init-file' << '0'
                linkerArgs << '-s' << 'TOTAL_MEMORY=67108864' // consider increasing this if running out of memory on GB computations
                def linkerArgsString = linkerArgs.join(" ")
                println "Linking: ${emccCommand[wasm]} ${linkerArgsString}"
                commandLine emccCommand[wasm]
                args linkerArgs
            }
        }
    }

    tasks.create(name: 'createGiacGgbJsWasm' + wasm, dependsOn: 'emccGiacJsWasm' + wasm, type: Copy) {
        description 'Creates the giacggb.js folder to store embeddable giac.js.'
        from 'src/giac.js'
        into binaryJsDirs[wasm]
        include ('ggb.html')
    }

    tasks.create(name: 'createGiacJsWasm'+ wasm, dependsOn: 'createGiacGgbJsWasm' + wasm) {
        doLast {
            copy {
                from binaryJsDirs[wasm]
                into binaryJsDirs[wasm]
                include ('giacggb.js')
                rename 'giacggb.js', 'giac.js'
                filter { line -> line.replace('Module', '__ggb__giac').replace('"use asm";', '') }
            }
        }
    }
})

task createGiacJs(dependsOn: ['activateEmsdk', 'createGiacJsWasm0', 'activateEmsdkWasm', 'createGiacWasmJs']){
    description 'Creates JavaScript version of Giac which can be embedded into GeoGebraWeb.'
}

task createGiacWasmJs(dependsOn: 'createGiacJsWasm1') {
    description 'Creates WebAssembly version of Giac which can be embedded into GeoGebraWeb.'
    doLast {
        exec {
            commandLine "bash", "-c", "base64 -w0 giacggb.wasm > giacggb.wasm.b64"
            workingDir binaryJsDirs[1]
        }
        copy {
            from binaryJsDirs[1]
            into binaryJsDirs[1]
            include ('giacggb.wasm.b64')
            rename 'giacggb.wasm.b64', 'giac.wasm.js'
            filter { line -> "if (!window.__ggb__giac) window.__ggb__giac = (typeof window.__ggb__giac !== \"undefined\" ? window.__ggb__giac : null) || {};\nwindow.__ggb__giac.wasmBinaryFile=\"data:application/wasm;base64," + line + "\";\n" }
        }
        exec {
            commandLine "bash", "-c", "cat giac.js >> giac.wasm.js"
            workingDir binaryJsDirs[1]
        }
    }
}

// Using emsdk

task downloadEmsdk {
    description 'Downloads emscripten SDK and downloads it.'
    outputs.dir emsdkDir
    doLast {
        emsdkDir.mkdirs()
        ant.get(src: "$emsdkUrlFolder/$emsdkTgzFile", dest: emsdkDir,
            skipexisting: true, usetimestamp: true)
        copy {
            from tarTree("$emsdkDir/$emsdkTgzFile")
            into "$emsdkDir"
        }
    }
}

task installEmsdk (/*dependsOn: 'downloadEmsdk'*/) {
    description 'Installs/updates the emscripten SDK.'
    doLast {
        exec {
            commandLine './emsdk update'.split()
            workingDir emsdkRunDir
        }
        // FIXME: If already installed, this results in an error and stops.
        // Below this may not work with older emscripten versions.
        exec {
            commandLine "./emsdk install sdk-${emscriptenVersion[0]}-64bit".split()
            workingDir emsdkRunDir
        }
    }
}

task activateEmsdk (/*dependsOn: 'downloadEmsdk'*/) {
    description 'Activates the emscripten SDK.'
    doLast {
        exec {
            commandLine "./emsdk activate sdk-${emscriptenVersion[0]}-64bit".split()
            workingDir emsdkRunDir
        }
    }
}

task activateEmsdkWasm (/*dependsOn: 'downloadEmsdk'*/) {
    mustRunAfter 'createGiacJsWasm0'
    description 'Activates the emscripten SDK.'
    doLast {
        exec {
            commandLine "./emsdk activate sdk-${emscriptenVersion[1]}-64bit".split()
            workingDir emsdkRunDir
        }
    }
}

task emConfigureGmp {
    description 'Configures GMP for the emscripten SDK.'
    doLast {
        exec {
            commandLine 'bash', '-c', "source $emsdkRunDir/emsdk_env.sh; ${emscriptenDir[0]}/emconfigure $gmpSourceDir/configure --build=none --host=none --disable-assembly"
            workingDir gmpSourceDir
        }
    }
}

task emMakeGmp {
    description 'Makes GMP with the emscripten SDK.'
    doLast {
        exec {
            commandLine 'bash', '-c', "source $emsdkRunDir/emsdk_env.sh; ${emscriptenDir[0]}/emmake make"
            workingDir gmpSourceDir
        }
    }
}

task emConfigureMpfr {
    description 'Configures MPFR for the emscripten SDK.'
    doLast {
        exec {
            commandLine 'bash', '-c', "source $emsdkRunDir/emsdk_env.sh; " +
                "${emscriptenDir[0]}/emconfigure $mpfrSourceDir/configure " + 
                "--build=none --host=none --disable-assembly "
                "--with-gmp-lib=$gmpSourceDir/.libs --with-gmp-include=$gmpSourceDir"
            workingDir mpfrSourceDir
        }
    }
}

task emMakeMpfr {
    description 'Makes MPFR with the emscripten SDK.'
    doLast {
        exec {
            commandLine 'bash', '-c', "source $emsdkRunDir/emsdk_env.sh; ${emscriptenDir[0]}/emmake make"
            workingDir mpfrSourceDir
        }
    }
}

task androidCopyCrystaxSo (dependsOn: 'giac-android:copyCrystaxSo')

task androidAar (dependsOn: ['androidCopyCrystaxSo', 'androidCopyEabiLibjavagiacSo',
        'androidCopyX86LibjavagiacSo', 'androidCopyX86_64LibjavagiacSo', 'androidCopyArm64LibjavagiacSo', 'giac-android:assemble']) {
    description 'Creates .aar package'
}
