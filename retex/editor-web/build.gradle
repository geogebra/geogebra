plugins {
	id 'java-library'
	id 'eclipse'
	id 'pmd'
	id 'checkstyle'
	id 'org.wisepersist.gwt' version '1.1.19'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

evaluationDependsOn ':renderer-web'
evaluationDependsOn ':editor-base'
ext.gwtCompilerVersion = project(':renderer-web').gwtCompilerVersion

gwt {
	gwtVersion gwtCompilerVersion
	maxHeapSize = '2000M'
	// only compilable module
	modules 'com.himamis.retex.editor.JLMEditorExportedLibrary'
	devModules 'com.himamis.retex.editor.JLMEditorGWTDev'
	compiler {
		logLevel = 'DEBUG'
		if (project.hasProperty("gdetailed")) {
			style = org.wisepersist.gradle.plugins.gwt.Style.DETAILED
		} else {
			disableClassMetadata = true
		}
	}
	jsInteropExports {
		shouldGenerate = true;
	}
}

dependencies {
	api project(':renderer-web'),
		project(':editor-base'),
		files(project(':editor-base').sourceSets.main.allSource.srcDirs),
		files(project(':renderer-web').sourceSets.main.allSource.srcDirs),
		files(project(':gwtutil').sourceSets.main.allSource.srcDirs),
		"org.gwtproject:gwt-dev:$gwtCompilerVersion",
		"org.gwtproject:gwt-user:$gwtCompilerVersion"
	testImplementation "org.gwtproject:gwt-user:$gwtCompilerVersion",
			'org.gwtproject.dom:gwt-dom:1.0.0-RC2',
		files("../lib/gwt-layout-202206111.jar"),
		files("../lib/gwt-widgets-202206111.jar"),
		files("../lib/gwt-widgets-202206111-sources.jar")

}

task run(type: org.wisepersist.gradle.plugins.gwt.GwtDev, dependsOn: ['jar']) {
	war = file('war')
	description 'Starts a codeserver, and a simple webserver for development'
}

task jarAll(type: Jar) {
	classifier = 'all'
	from project.sourceSets.main.java
	from project.sourceSets.main.output
	from project(':renderer-base').sourceSets.main.java
	from project(':renderer-base').sourceSets.main.output
}

task jarSources(type: Jar, dependsOn: classes) {
	classifier = 'sources'
    from sourceSets.main.allSource 
}

// exclude from the eclipse classpath the java files in the resources dir
eclipse.classpath.file { 
	whenMerged { classpath ->
		classpath.entries.find { entry -> entry.kind == 'src' && entry.path == 'src/main/resources' }.excludes = ['**/*.java']
	}
}

task cleanDist(type: Delete) {
	delete 'dist'
}

task dist(type: Copy, dependsOn: cleanDist) {
	from compileGwt
	into 'dist'
	doLast {
		// rename library
		File jsFile = file('dist/jlatexmath/jlatexmath.nocache.js')
		File newFile = file('dist/jlatexmath/jlatexmath.js')
		jsFile.renameTo(newFile)

		// remove unneeded artifacts
		File clearCacheGif = file('dist/jlatexmath/clear.cache.gif')
		clearCacheGif.delete();
		File webInfFolder = file('dist/WEB-INF')
		deleteDir(webInfFolder)
	}
}

task zipDist(type: Zip, dependsOn: dist) {
	from 'dist/jlatexmath'
	destinationDir file('dist/')
}

def deleteDir(dir) {
	if (dir.isDirectory()) {
        String[] children = dir.list();
        for (int i = 0; i < children.length; i++) {
            boolean success = deleteDir(new File(dir, children[i]));
            if (!success) {
                return false;
            }
        }
    }
    return dir.delete();
}

// https://issues.gradle.org/browse/GRADLE-2778
// http://discuss.gradle.org/t/javadoc-generation-failed-with-vaadin-dependency/2502/12
javadoc {
    options.addStringOption("sourcepath", "")
}

pmd {
     ignoreFailures = true
     ruleSets = []
     ruleSetFiles = files("../../config/pmd.xml")
}
